[
    {
        "name": "Clef",
        "glyphs": {
            "clefs.C": "cClef",
            "clefs.C_change": "cClefChange",
            "clefs.varC": {
                "name": "cClefFrench20C",
                "altOf": "cClef"
            },
            "clefs.varC_change": {
                "name": "cClefFrench20CChange",
                "altOf": "cClefChange"
            },
            "clefs.F": "fClef",
            "clefs.F_change": "fClefChange",
            "clefs.G": "gClef",
            "clefs.G_change": "gClefChange",
            "clefs.GG": "gClef8vbOld",
            "clefs.GG_change": {
                "name": "gClef8vbOldChange",
                "ligOf": [
                    "gClef8vbOld",
                    "clefChangeCombining"
                ]
            },
            "clefs.tenorG": "gClef8vbCClef",
            "clefs.tenorG_change": {
                "name": "gClef8vbCClefChange",
                "ligOf": [
                    "gClef8vbCClef",
                    "clefChangeCombining"
                ]
            },
            "clefs.percussion": "unpitchedPercussionClef1",
            "clefs.percussion_change": {
                "name": "unpitchedPercussionClef1Change",
                "ligOf": [
                    "unpitchedPercussionClef1",
                    "clefChangeCombining"
                ]
            },
            "clefs.varpercussion": "unpitchedPercussionClef2",
            "clefs.varpercussion_change": {
                "name": "unpitchedPercussionClef2Change",
                "ligOf": [
                    "unpitchedPercussionClef2",
                    "clefChangeCombining"
                ]
            },
            "clefs.tab": [
                {
                    "name": "6stringTabClef",
                    "note": "SMuFL defines two tab clefs, one for a 4-line staff and one for 6. I plan to make them both aliases for clefs.tab."
                },
                "4stringTabClef"
            ],
            "clefs.tab_change": [
                {
                    "name": "6stringTabClefChange",
                    "ligOf": [
                        "6stringTabClef",
                        "clefChangeCombining"
                    ]
                },
                {
                    "name": "4stringTabClefChange",
                    "ligOf": [
                        "4stringTabClef",
                        "clefChangeCombining"
                    ]
                }
            ],
            "clefs.change_combining": [
                {
                    "name": "clefChangeCombining",
                    "status": "rejected",
                    "note": "Emmentaler needs this combining glyph in order for the ligature clefs to work as expected. Edit 20 Mar '22: It doesn't.",
                    "ref": {
                        "url": "https://lists.gnu.org/archive/html/lilypond-devel/2022-03/msg00066.html",
                        "threaded": true
                    }
                }
            ]
        }
    },
    {
        "name": "Time Signature",
        "glyphs": {
            "timesig.C44": "timeSigCommon",
            "timesig.C22": "timeSigCutCommon"
        }
    },
    {
        "name": "Number",
        "glyphs": {
            "plus": [
                {
                    "name": "timeSigPlus",
                    "note": "SMuFL distinguishes timeSigPlus, which adds entire signatures together, from timeSigPlusSmall, which only adds numerators. I plan on making them both aliases of plus."
                },
                "timeSigPlusSmall"
            ],
            "comma": "timeSigComma",
            "hyphen": "timeSigMinus",
            "period": [
                {
                    "name": "timeSigDot",
                    "note": "Since most of the related symbols begin with timeSig-, I opted to do the same here."
                },
                {
                    "name": "timeSigPeriod",
                    "status": "rejected",
                    "note": "-Dot is attested in SMuFL (keyboardPedalDot); -Period is not.",
                    "ref": "https://lists.w3.org/Archives/Public/public-music-notation/2021Jun/0024.html"
                }
            ],
            "zero": [
                {
                    "name": "timeSig0",
                    "note": "SMuFL specifies three distinct number sets; timeSigX seems to match ours the best. (1-9 are the same as 0.)"
                }
            ],
            "zero.small": [
                {
                    "name": "figbass0",
                    "status": "contentious",
                    "note": "A xxx.small number set will probably need to be created in the future.",
                    "ref": {
                        "url": "https://lists.gnu.org/archive/html/lilypond-devel/2021-06/msg00035.html",
                        "threaded": true
                    }
                },
                {
                    "name": "fingering0",
                    "status": "contentious",
                    "note": ""
                }
            ]
        }
    },
    {
        "name": "Accidental",
        "glyphs": {
            "accidentals.sharp": [
                "accidentalSharp",
                {
                    "name": "accidentalWyschnegradsky6TwelfthsSharp",
                    "status": "rejected",
                    "note": "I wonder if it's fair to users if we claim to support Wyschnegradsky accidentals if we only really have three of SMuFL's full set of 22."
                },
                "accidentalBakiyeSharp",
                "accidentalSharpArabic"
            ],
            "accidentals.sharp.arrowup": [
                "accidentalThreeQuarterTonesSharpArrowUp",
                {
                    "name": "accidentalSharpOneArrowUp",
                    "status": "rejected",
                    "note": "The arrow is in a different place. This fact, along with the differing arrowhead style, suggests we shouldn't encode this accidental set or the Stockhausen set at all."
                },
                {
                    "name": "accidentalSharpRaisedStockhausen",
                    "status": "rejected"
                }
            ],
            "accidentals.sharp.arrowdown": [
                "accidentalQuarterToneSharpArrowDown",
                {
                    "name": "accidentalSharpOneArrowDown",
                    "status": "rejected",
                    "note": "See above."
                },
                {
                    "name": "accidentalSharpLoweredStockhausen",
                    "status": "rejected"
                }
            ],
            "accidentals.sharp.arrowboth": {
                "name": "accidentalSharpArrowsUpAndDown",
                "note": "We could name it -TwoArrows or -BothArrows, but I think this is fine."
            },
            "accidentals.sharp.slashslash.stem": [
                "accidentalQuarterToneSharpStein",
                {
                    "name": "accidentalKomaSharp",
                    "note": "This one seems a tad wider than the others, but I don't see it as too much of a problem."
                },
                "accidentalQuarterToneSharpArabic"
            ],
            "accidentals.sharp.slashslashslash.stemstem": [
                "accidentalBuyukMucennebSharp",
                {
                    "name": "accidentalThreeQuarterTonesSharpStockhausen",
                    "status": "rejected",
                    "note": "Resemblance is dubious. Besides, given our other Stockhausen troubles, it's probably best not to bother."
                }
            ],
            "accidentals.sharp.slashslashslash.stem": "accidentalKucukMucennebSharp",
            "accidentals.sharp.slash.stem": [
                {
                    "name": "accidentalRaiseOneUndecimalQuartertone",
                    "note": "Doesn't quite match the Emmentaler glyph's proportions, but it doesn't seem like too much of a problem to me."
                },
                {
                    "name": "accidentalOneQuarterToneSharpStockhausen",
                    "status": "rejected",
                    "note": "Doesn't match the Emmentaler glyph's proportions; plus, it's Stockhausen."
                }
            ],
            "accidentals.sharp.slashslash.stemstemstem": [
                "accidentalThreeQuarterTonesSharpStein",
                {
                    "name": "accidentalWyschnegradsky9TwelfthsSharp",
                    "status": "rejected",
                    "note": "See above on Wyschnegradsky accidentals."
                },
                "accidentalThreeQuarterTonesSharpArabic"
            ],
            "accidentals.doublesharp": [
                "accidentalDoubleSharp",
                "accidentalDoubleSharpArabic"
            ],
            "accidentals.natural": [
                "accidentalNatural",
                "accidentalNaturalArabic"
            ],
            "accidentals.natural.arrowup": [
                "accidentalQuarterToneSharpNaturalArrowUp",
                {
                    "name": "accidentalNaturalOneArrowUp",
                    "status": "rejected",
                    "note": "See the above note on the arrowed sharps."
                },
                {
                    "name": "accidentalNaturalRaisedStockhausen",
                    "status": "rejected"
                }
            ],
            "accidentals.natural.arrowdown": [
                "accidentalQuarterToneFlatNaturalArrowDown",
                {
                    "name": "accidentalNaturalOneArrowDown",
                    "status": "rejected",
                    "note": "See the above note on the arrowed sharps."
                },
                {
                    "name": "accidentalNaturalLoweredStockhausen",
                    "status": "rejected"
                }
            ],
            "accidentals.natural.arrowboth": [
                {
                    "name": "accidentalNaturalArrowsUpAndDown",
                    "note": "We could name it -TwoArrows or -BothArrows, but I think this is fine."
                }
            ],
            "accidentals.flat": [
                "accidentalFlat",
                {
                    "name": "accidentalWyschnegradsky6TwelfthsFlat",
                    "status": "rejected",
                    "note": "See above on Wyschnegradsky accidentals."
                },
                "accidentalKucukMucennebFlat",
                "accidentalFlatArabic"
            ],
            "accidentals.flat.arrowup": [
                "accidentalQuarterToneFlatArrowUp",
                {
                    "name": "accidentalFlatOneArrowUp",
                    "status": "rejected",
                    "note": "See the above note on the arrowed sharps."
                },
                {
                    "name": "accidentalFlatRaisedStockhausen",
                    "status": "rejected"
                }
            ],
            "accidentals.flat.arrowdown": [
                "accidentalThreeQuarterTonesFlatArrowDown",
                {
                    "name": "accidentalFlatOneArrowDown",
                    "status": "rejected",
                    "note": "See the above note on the arrowed sharps."
                },
                {
                    "name": "accidentalFlatLoweredStockhausen",
                    "status": "rejected"
                }
            ],
            "accidentals.flat.arrowboth": {
                "name": "accidentalFlatArrowsUpAndDown",
                "note": "We could name it -TwoArrows or -BothArrows, but I think this is fine."
            },
            "accidentals.flat.slash": [
                "accidentalBakiyeFlat",
                {
                    "name": "accidentalOneQuarterToneFlatStockhausen",
                    "status": "rejected",
                    "note": "Honestly, this one looks identical to the others. But if I'm not doing Stockhausen, I'm not doing Stockhausen."
                },
                "accidentalQuarterToneFlatArabic"
            ],
            "accidentals.flat.slashslash": "accidentalBuyukMucennebFlat",
            "accidentals.mirroredflat.flat": "accidentalThreeQuarterTonesFlatCouper",
            "accidentals.mirroredflat": [
                "accidentalQuarterToneFlatStein",
                "accidentalLowerOneUndecimalQuartertone",
                "accidentalKomaFlat"
            ],
            "accidentals.mirroredflat.backslash": [
                {
                    "name": "accidentalReversedFlatSlash",
                    "note": "What accidental system uses this? Might inform our name choice."
                },
                {
                    "name": "accidentalMirroredFlatSlash",
                    "status": "rejected",
                    "note": "-Reversed- is attested in SMuFL (e.g. accidentalReversedFlatArrowUp); -Mirrored- is not.",
                    "ref": "https://lists.w3.org/Archives/Public/public-music-notation/2021Jun/0024.html"
                }
            ],
            "accidentals.flatflat": [
                "accidentalDoubleFlat",
                "accidentalDoubleFlatArabic"
            ],
            "accidentals.flatflat.slash": {
                "name": "accidentalDoubleFlatSlash",
                "note": "What accidental system uses this? Might inform our name choice."
            },
            "accidentals.rightparen": "accidentalParensRight",
            "accidentals.leftparen": "accidentalParensLeft"
        }
    },
    {
        "name": "Default Notehead",
        "glyphs": {
            "noteheads.uM2": {
                "name": "noteheadLongaUp",
                "status": "contentious",
                "note": "No analog found in Bravura. Because of their hardcoded stems, these glyphs look more like Bravura's \"Individual notes\" glyphs (i.e. noteHalfUp). However, those glyphs are not meant for direct music engraving.",
                "ref": {
                    "url": "https://lists.gnu.org/archive/html/lilypond-devel/2021-12/msg00120.html",
                    "threaded": true
                }
            },
            "noteheads.dM2": {
                "name": "noteheadLongaDown",
                "status": "contentious",
                "note": "It looks like we hardcoded the stems here to make sure they fit nicely with the sidebars. This is probably a discussion for elsewhere, but is that really the best solution? It would take some work, but perhaps we should refrain from encoding (single-bar) breve and longa glyphs, and instead draw their bars with primitives to match the stem.",
                "ref": {
                    "url": "https://lists.gnu.org/archive/html/lilypond-devel/2021-07/msg00029.html",
                    "threaded": true
                }
            },
            "noteheads.sM1": {
                "name": "noteheadDoubleWholeAlt",
                "altOf": "noteheadDoubleWhole"
            },
            "noteheads.s0": "noteheadWhole",
            "noteheads.s1": "noteheadHalf",
            "noteheads.s2": "noteheadBlack"
        }
    },
    {
        "name": "Special Notehead",
        "glyphs": {
            "noteheads.sM1double": "noteheadDoubleWhole",
            "noteheads.s0diamond": "noteheadDiamondWholeOld",
            "noteheads.s1diamond": "noteheadDiamondHalfOld",
            "noteheads.s2diamond": "noteheadDiamondBlackOld",
            "noteheads.s0triangle": [
                "noteheadTriangleWhole",
                {
                    "name": "noteheadTriangleDownWhole",
                    "status": "rejected",
                    "note": "This and the following matchups are highly debatable, so I opted to define a new notehead group instead."
                }
            ],
            "noteheads.s1triangle": [
                "noteheadTriangleHalf",
                {
                    "name": "noteheadTriangleDownHalf",
                    "status": "rejected"
                },
                {
                    "name": "noteheadTriangleLeftWhite",
                    "status": "rejected"
                }
            ],
            "noteheads.s2triangle": [
                "noteheadTriangleBlack",
                {
                    "name": "noteheadTriangleDownBlack",
                    "status": "rejected"
                },
                {
                    "name": "noteheadTriangleLeftBlack",
                    "status": "rejected"
                }
            ],
            "noteheads.s0slash": "noteheadSlashWhiteWhole",
            "noteheads.s1slash": "noteheadSlashWhiteHalf",
            "noteheads.s2slash": {
                "name": "noteheadSlashHorizontalEnds",
                "note": "For some reason Bravura includes a version with vertical line ends, which is why this glyph name specifies horizontal ends."
            },
            "noteheads.s0cross": "noteheadXWhole",
            "noteheads.s1cross": "noteheadXHalf",
            "noteheads.s2cross": "noteheadXBlack",
            "noteheads.s2xcircle": [
                {
                    "name": "noteheadHalfWithX",
                    "note": "A lot of options here. It seems that mapping them all should work just fine.",
                    "ref": "https://lists.gnu.org/archive/html/lilypond-devel/2021-07/msg00029.html"
                },
                "noteheadVoidWithX",
                "noteheadCircleXWhole",
                "noteheadCircleXHalf",
                "noteheadCircleX"
            ],
            "noteheads.s0harmonic": [
                {
                    "name": "noteheadDiamondWhole",
                    "note": "SMuFL-using programs will expect the -Diamond- set to be visually cohesive, so we should encode both -Whole and -Half as aliases for -.s0harmonic."
                },
                "noteheadDiamondHalf"
            ],
            "noteheads.s2harmonic": "noteheadDiamondBlack"
        }
    },
    {
        "name": "Shape-note Notehead",
        "glyphs": {
            "noteheads.s0do": {
                "name": "noteShapeTriangleUpWhite",
                "note": "SMuFL's coverage of shape notes is rather poor, missing many inverted glyphs, so be warned: I've had to add quite a few new base glyph names throughout this section."
            },
            "noteheads.s1do": {
                "name": "",
                "status": "contentious",
                "note": "I think the reason to distinguish -.s1xx from -.s0xx disappeared with commit 2d460deb (Define notehead attachment points separately); indeed, I've found every pair's generating code to be functionally identical and not worth encoding twice. (Further -s1xx's in the Aiken and Funk sets will be omitted for brevity; see the Walker section for a small exception.)",
                "ref": "https://lists.gnu.org/archive/html/lilypond-devel/2021-07/msg00034.html"
            },
            "noteheads.s2do": "noteShapeTriangleUpBlack",
            "noteheads.s0doThin": {
                "name": "noteShapeTriangleUpWhiteThin",
                "altOf": "noteShapeTriangleUpWhite"
            },
            "noteheads.s2doThin": {
                "name": "noteShapeTriangleUpBlackThin",
                "altOf": "noteShapeTriangleUpBlack"
            },

            "noteheads.s0re": "noteShapeMoonWhite",
            "noteheads.s2re": "noteShapeMoonBlack",
            "noteheads.s0reThin": {
                "name": "noteShapeMoonWhiteThin",
                "altOf": "noteShapeMoonWhite"
            },
            "noteheads.s2reThin": {
                "name": "noteShapeMoonBlackThin",
                "altOf": "noteShapeMoonBlack"
            },

            "noteheads.s0mi": {
                "name": "noteShapeDiamondWhiteReversed",
                "altOf": "noteShapeDiamondWhite"
            },
            "noteheads.s2mi": {
                "name": "noteShapeDiamondBlackReversed",
                "altOf": "noteShapeDiamondBlack"
            },
            "noteheads.s0miMirror": "noteShapeDiamondWhite",
            "noteheads.s2miMirror": "noteShapeDiamondBlack",
            "noteheads.s0miThin": {
                "name": "noteShapeDiamondWhiteThin",
                "altOf": "noteShapeDiamondWhite"
            },
            "noteheads.s2miThin": {
                "name": "noteShapeDiamondBlackThin",
                "altOf": "noteShapeDiamondBlack"
            },

            "noteheads.u0fa": "noteShapeTriangleLeftWhite",
            "noteheads.d0fa": "noteShapeTriangleRightWhite",
            "noteheads.u2fa": "noteShapeTriangleLeftBlack",
            "noteheads.d2fa": "noteShapeTriangleRightBlack",
            "noteheads.u0faThin": {
                "name": "noteShapeTriangleLeftWhiteThin",
                "altOf": "noteShapeTriangleLeftWhite"
            },
            "noteheads.d0faThin": {
                "name": "noteShapeTriangleRightWhiteThin",
                "altOf": "noteShapeTriangleRightWhite"
            },
            "noteheads.u2faThin": {
                "name": "noteShapeTriangleLeftBlackThin",
                "altOf": "noteShapeTriangleLeftBlack"
            },
            "noteheads.d2faThin": {
                "name": "noteShapeTriangleRightBlackThin",
                "altOf": "noteShapeTriangleRightBlack"
            },

            "noteheads.s0sol": "noteShapeRoundWhite",
            "noteheads.s2sol": "noteShapeRoundBlack",

            "noteheads.s0la": "noteShapeSquareWhite",
            "noteheads.s2la": "noteShapeSquareBlack",
            "noteheads.s0laThin": {
                "name": "noteShapeSquareWhiteThin",
                "altOf": "noteShapeSquareWhite"
            },
            "noteheads.s2laThin": {
                "name": "noteShapeSquareBlackThin",
                "altOf": "noteShapeSquareBlack"
            },

            "noteheads.s0ti": "noteShapeTriangleRoundWhite",
            "noteheads.s2ti": "noteShapeTriangleRoundBlack",
            "noteheads.s0tiThin": {
                "name": "noteShapeTriangleRoundWhiteThin",
                "altOf": "noteShapeTriangleRoundWhite"
            },
            "noteheads.s2tiThin": {
                "name": "noteShapeTriangleRoundBlackThin",
                "altOf": "noteShapeTriangleRoundBlack"
            },

            "noteheads.u0doFunk": [
                {
                    "name": "noteShapeMoonRightWhite",
                    "note": "SMuFL has only one set for all shape-note systems. For clarity, we should add suffixes to our non-Aiken sets and make them stylistic alternates of the unsuffixed glyphs. Our glyphs should also have unsuffixed aliases when not already defined in the Aiken set."
                },
                {
                    "name": "noteShapeMoonRightWhiteFunk",
                    "altOf": "noteShapeMoonRightWhite"
                }
            ],
            "noteheads.d0doFunk": [
                {
                    "name": "noteShapeMoonLeftWhite",
                    "note": ""
                },
                {
                    "name": "noteShapeMoonLeftWhiteFunk",
                    "altOf": "noteShapeMoonLeftWhite"
                }
            ],
            "noteheads.u2doFunk": [
                "noteShapeMoonRightBlack",
                {
                    "name": "noteShapeMoonRightBlackFunk",
                    "altOf": "noteShapeMoonRightBlack"
                }
            ],
            "noteheads.d2doFunk": [
                "noteShapeMoonLeftBlack",
                {
                    "name": "noteShapeMoonLeftBlackFunk",
                    "altOf": "noteShapeMoonLeftBlack"
                }
            ],

            "noteheads.u0reFunk": [
                "noteShapeArrowheadRightWhite",
                {
                    "name": "noteShapeArrowheadRightWhiteFunk",
                    "altOf": "noteShapeArrowheadRightWhite"
                }
            ],
            "noteheads.d0reFunk": [
                "noteShapeArrowheadLeftWhite",
                {
                    "name": "noteShapeArrowheadLeftWhiteFunk",
                    "altOf": "noteShapeArrowheadLeftWhite"
                }
            ],
            "noteheads.u2reFunk": [
                "noteShapeArrowheadRightBlack",
                {
                    "name": "noteShapeArrowheadRightBlackFunk",
                    "altOf": "noteShapeArrowheadRightBlack"
                }
            ],
            "noteheads.d2reFunk": [
                "noteShapeArrowheadLeftBlack",
                {
                    "name": "noteShapeArrowheadLeftBlackFunk",
                    "altOf": "noteShapeArrowheadLeftBlack"
                }
            ],

            "noteheads.u0miFunk": {
                "name": "noteShapeDiamondWhiteReversedFunk",
                "altOf": "noteShapeDiamondWhite"
            },
            "noteheads.d0miFunk": {
                "name": "noteShapeDiamondWhiteFunk",
                "altOf": "noteShapeDiamondWhite"
            },
            "noteheads.s2miFunk": {
                "name": "noteShapeDiamondBlackFunk",
                "altOf": "noteShapeDiamondBlack"
            },

            "noteheads.u0faFunk": {
                "name": "noteShapeTriangleLeftWhiteFunk",
                "altOf": "noteShapeTriangleLeftWhite"
            },
            "noteheads.d0faFunk": {
                "name": "noteShapeTriangleRightWhiteFunk",
                "altOf": "noteShapeTriangleRightWhite"
            },
            "noteheads.u2faFunk": {
                "name": "noteShapeTriangleLeftBlackFunk",
                "altOf": "noteShapeTriangleLeftBlack"
            },
            "noteheads.d2faFunk": {
                "name": "noteShapeTriangleRightBlackFunk",
                "altOf": "noteShapeTriangleRightBlack"
            },

            "noteheads.s0solFunk": [
                {
                    "name": "noteShapeRoundWhiteFunk",
                    "altOf": "noteShapeRoundWhite"
                },
                {
                    "name": "noteShapeRoundWhiteWalker",
                    "altOf": "noteShapeRoundWhite",
                    "note": "-sXsolFunk is used in both our Funk set and our Walker set. It should receive aliases for both so that other programs don't get confused."
                }
            ],
            "noteheads.s2solFunk": [
                {
                    "name": "noteShapeRoundBlackFunk",
                    "altOf": "noteShapeRoundBlack"
                },
                {
                    "name": "noteShapeRoundBlackWalker",
                    "altOf": "noteShapeRoundBlack"
                }
            ],
            
            "noteheads.s0laFunk": {
                "name": "noteShapeSquareWhiteFunk",
                "altOf": "noteShapeSquareWhite"
            },
            "noteheads.s2laFunk": {
                "name": "noteShapeSquareBlackFunk",
                "altOf": "noteShapeSquareBlack"
            },

            "noteheads.u0tiFunk": [
                "noteShapeTriangleRoundRightWhite",
                {
                    "name": "noteShapeTriangleRoundRightWhiteFunk",
                    "altOf": "noteShapeTriangleRoundRightWhite"
                }
            ],
            "noteheads.d0tiFunk": [
                "noteShapeTriangleRoundLeftWhite",
                {
                    "name": "noteShapeTriangleRoundLeftWhiteFunk",
                    "altOf": "noteShapeTriangleRoundLeftWhite"
                }
            ],
            "noteheads.u2tiFunk": [
                "noteShapeTriangleRoundRightBlack",
                {
                    "name": "noteShapeTriangleRoundRightBlackFunk",
                    "altOf": "noteShapeTriangleRoundRightBlack"
                }
            ],
            "noteheads.d2tiFunk": [
                "noteShapeTriangleRoundLeftBlack",
                {
                    "name": "noteShapeTriangleRoundLeftBlackFunk",
                    "altOf": "noteShapeTriangleRoundLeftBlack"
                }
            ],


            "noteheads.s0doWalker": {
                "name": "",
                "status": "contentious",
                "note": "Our Walker glyphs distinguish whole from half notes in only one respect: whole notes appear to face downwards all the time. It seems to me that that sort of difference would be better defined within the \\walkerHeads command rather than in the font, which would allow us to remove more redundant glyphs. Thoughts? (From now on, -.s0xxWalker glyphs will be omitted for brevity.)",
                "ref": "https://lists.gnu.org/archive/html/lilypond-devel/2021-07/msg00034.html"
            },
            "noteheads.u1doWalker": [
                "noteShapeKeystoneWhite",
                {
                    "name": "noteShapeKeystoneWhiteWalker",
                    "altOf": "noteShapeKeystoneWhite"
                }
            ],
            "noteheads.d1doWalker": [
                {
                    "name": "noteShapeKeystoneUprightWhite",
                    "status": "contentious",
                    "note": "SMuFL's description for -Keystone- states that it is an 'Inverted keystone'. Therefore, it seems natural to me to call this one -KeystoneUpright-."
                },
                {
                    "name": "noteShapeKeystoneUprightWhiteWalker",
                    "altOf": "noteShapeKeystoneUprightWhite",
                    "status": "contentious"
                }
            ],
            "noteheads.u2doWalker": [
                "noteShapeKeystoneBlack",
                {
                    "name": "noteShapeKeystoneBlackWalker",
                    "altOf": "noteShapeKeystoneBlack"
                }
            ],
            "noteheads.d2doWalker": [
                {
                    "name": "noteShapeKeystoneUprightBlack",
                    "status": "contentious"
                },
                {
                    "name": "noteShapeKeystoneUprightBlackWalker",
                    "altOf": "noteShapeKeystoneUprightBlack",
                    "status": "contentious"
                }
            ],

            "noteheads.u1reWalker": [
                "noteShapeQuarterMoonWhite",
                {
                    "name": "noteShapeQuarterMoonWhiteWalker",
                    "altOf": "noteShapeQuarterMoonWhite"
                }
            ],
            "noteheads.d1reWalker": [
                {
                    "name": "noteShapeQuarterMoonLeftWhite",
                    "status": "contentious",
                    "note": "This seems like the best naming option, even though SMuFL's -QuarterMoon- glyph names don't indicate -Right-."
                },
                {
                    "name": "noteShapeQuarterMoonLeftWhiteWalker",
                    "status": "contentious",
                    "altOf": "noteShapeQuarterMoonLeftWhite"
                }
            ],
            "noteheads.u2reWalker": [
                "noteShapeQuarterMoonBlack",
                {
                    "name": "noteShapeQuarterMoonBlackWalker",
                    "altOf": "noteShapeQuarterMoonBlack"
                }
            ],
            "noteheads.d2reWalker": [
                {
                    "name": "noteShapeQuarterMoonLeftBlack",
                    "status": "contentious"
                },
                {
                    "name": "noteShapeQuarterMoonLeftBlackWalker",
                    "status": "contentious",
                    "altOf": "noteShapeQuarterMoonLeftBlack"
                }
            ],

            "noteheads.s1miWalker": {
                "name": "noteShapeDiamondWhiteWalker",
                "altOf": "noteShapeDiamondWhite"
            },
            "noteheads.s2miWalker": {
                "name": "noteShapeDiamondBlackWalker",
                "altOf": "noteShapeDiamondBlack"
            },

            "noteheads.u1faWalker": {
                "name": "noteShapeTriangleLeftWhiteWalker",
                "altOf": "noteShapeTriangleLeftWhite"
            },
            "noteheads.d1faWalker": {
                "name": "noteShapeTriangleRightWhiteWalker",
                "altOf": "noteShapeTriangleRightWhite"
            },
            "noteheads.u2faWalker": {
                "name": "noteShapeTriangleLeftBlackWalker",
                "altOf": "noteShapeTriangleLeftBlack"
            },
            "noteheads.d2faWalker": {
                "name": "noteShapeTriangleRightBlackWalker",
                "altOf": "noteShapeTriangleRightBlack"
            },

            "noteheads.s1laWalker": {
                "name": "noteShapeSquareWhiteWalker",
                "altOf": "noteShapeSquareWhite"
            },
            "noteheads.s2laWalker": {
                "name": "noteShapeSquareBlackWalker",
                "altOf": "noteShapeSquareBlack"
            },

            "noteheads.u1tiWalker": [
                {
                    "name": "noteShapeIsoscelesTriangleRightWhite",
                    "status": "contentious"
                },
                {
                    "name": "noteShapeIsoscelesTriangleRightWhiteWalker",
                    "altOf": "noteShapeIsoscelesTriangleRightWhite",
                    "status": "contentious",
                    "note": "See above regarding -.d1reWalker."
                }
            ],
            "noteheads.d1tiWalker": [
                "noteShapeIsoscelesTriangleWhite",
                {
                    "name": "noteShapeIsoscelesTriangleWhiteWalker",
                    "altOf": "noteShapeIsoscelesTriangleWhite"
                }
            ],
            "noteheads.u2tiWalker": [
                {
                    "name": "noteShapeIsoscelesTriangleRightBlack",
                    "status": "contentious"
                },
                {
                    "name": "noteShapeIsoscelesTriangleRightBlackWalker",
                    "altOf": "noteShapeIsoscelesTriangleRightBlack",
                    "status": "contentious"
                }
            ],
            "noteheads.d2tiWalker": [
                "noteShapeIsoscelesTriangleBlack",
                {
                    "name": "noteShapeIsoscelesTriangleBlackWalker",
                    "altOf": "noteShapeIsoscelesTriangleBlack"
                }
            ]
        }
    },
    {
        "name": "Rest",
        "glyphs": {
            "rests.0": "restWhole",
            "rests.1": "restHalf",
            "rests.0o": "restWholeLegerLine",
            "rests.1o": "restHalfLegerLine",
            "rests.M3": "restMaxima",
            "rests.M2": "restLonga",
            "rests.M1": "restDoubleWhole",
            "rests.M1o": "restDoubleWholeLegerLine",
            "rests.2": "restQuarter",
            "rests.2classical": "restQuarterOld",
            "rests.2z": "restQuarterZ",
            "rests.3": "rest8th",
            "rests.4": "rest16th",
            "rests.5": "rest32nd",
            "rests.6": "rest64th",
            "rests.7": "rest128th",
            "rests.8": "rest256th",
            "rests.9": "rest512th",
            "rests.10": "rest1024th"
        }
    },
    {
        "name": "Flag",
        "glyphs": {
            "flags.u3": "flag8thUp",
            "flags.u4": "flag16thUp",
            "flags.u5": "flag32ndUp",
            "flags.u6": "flag64thUp",
            "flags.u7": "flag128thUp",
            "flags.u8": "flag256thUp",
            "flags.u9": "flag512thUp",
            "flags.u10": "flag1024thUp",
            "flags.d3": "flag8thDown",
            "flags.d4": "flag16thDown",
            "flags.d5": "flag32ndDown",
            "flags.d6": "flag64thDown",
            "flags.d7": "flag128thDown",
            "flags.d8": "flag256thDown",
            "flags.d9": "flag512thDown",
            "flags.d10": "flag1024thDown",
            "flags.ugrace": "graceNoteSlashStemUp",
            "flags.dgrace": "graceNoteSlashStemDown"
        }
    },
    {
        "name": "Dot",
        "glyphs": {
            "dots.dot": "augmentationDot"
        }
    },
    {
        "name": "Dynamic",
        "glyphs": {
            "space": "dynamicCombinedSeparatorSpace",
            "f": "dynamicForte",
            "m": "dynamicMezzo",
            "n": "dynamicNiente",
            "p": "dynamicPiano",
            "r": "dynamicRinforzando",
            "s": "dynamicSforzando",
            "z": "dynamicZ"
        }
    },
    {
        "name": "Script",
        "glyphs": {
            "scripts.ufermata": "fermataAbove",
            "scripts.dfermata": "fermataBelow",

            "scripts.uhenzeshortfermata": "fermataShortHenzeAbove",
            "scripts.dhenzeshortfermata": "fermataShortHenzeBelow",
            "scripts.uhenzelongfermata": "fermataLongHenzeAbove",
            "scripts.dhenzelongfermata": "fermataLongHenzeBelow",

            "scripts.ushortfermata": "fermataShortAbove",
            "scripts.dshortfermata": "fermataShortBelow",
            "scripts.uveryshortfermata": "fermataVeryShortAbove",
            "scripts.dveryshortfermata": "fermataVeryShortBelow",

            "scripts.ulongfermata": "fermataLongAbove",
            "scripts.dlongfermata": "fermataLongBelow",
            "scripts.uverylongfermata": "fermataVeryLongAbove",
            "scripts.dverylongfermata": "fermataVeryLongBelow",

            "scripts.thumb": "stringsThumbPosition",

            "scripts.sforzato": [
                "articAccentAbove",
                "articAccentBelow"
            ],
            "scripts.espr": [
                "articSoftAccentAbove",
                "articSoftAccentBelow"
            ],
            "scripts.staccato": [
                "articStaccatoAbove",
                "articStaccatoBelow"
            ],
            "scripts.ustaccatissimo": "articStaccatissimoAbove",
            "scripts.dstaccatissimo": "articStaccatissimoBelow",
            "scripts.tenuto": [
                "articTenutoAbove",
                "articTenutoBelow"
            ],
            "scripts.uportato": "articTenutoStaccatoBelow",
            "scripts.dportato": "articTenutoStaccatoAbove",
            "scripts.umarcato": "articMarcatoAbove",
            "scripts.dmarcato": "articMarcatoBelow",

            "scripts.open": "brassMuteOpen",
            "scripts.halfopen": "brassMuteHalfClosed",
            "scripts.halfopenvertical": {
                "name": "brassMuteHalfClosedVertical",
                "altOf": "brassMuteHalfClosed"
            },
            "scripts.stopped": "brassMuteClosed",

            "scripts.upbow": "stringsUpBow",
            "scripts.downbow": "stringsDownBow",

            "scripts.reverseturn": "ornamentTurnInverted",
            "scripts.turn": "ornamentTurn",
            "scripts.slashturn": "ornamentTurnSlash",
            "scripts.haydnturn": "ornamentHaydn",
            "scripts.trill": "ornamentTrill",

            "scripts.upedalheel": "keyboardPedalHeel1",
            "scripts.dpedalheel": "keyboardPedalHeel2",
            "scripts.upedaltoe": "keyboardPedalToe1",
            "scripts.dpedaltoe": "keyboardPedalToe2",

            "scripts.flageolet": "stringsHarmonic",

            "scripts.segno": "segno",
            "scripts.varsegno": "segnoSerpent1",
            "scripts.coda": "coda",
            "scripts.varcoda": "codaSquare",

            "scripts.rcomma": [
                "breathMarkComma",
                "chantVirgula"
            ],
            "scripts.lcomma": {
                "name": "breathMarkCommaInverted",
                "altOf": "breathMarkComma",
                "note": "Is this primarily a chant thing or a modern notation thing? Might inform our name choice. EDIT: it's modern notation.",
                "ref": {
                    "url": "https://lists.gnu.org/archive/html/lilypond-devel/2021-12/msg00120.html",
                    "threaded": true
                }
            },
            "scripts.rvarcomma": [
                {
                    "name": "breathMarkCommaStraight",
                    "altOf": "breathMarkComma",
                    "status": "rejected",
                    "note": "If anyone at all uses this thing for actual breath marks and not just chant, I say we add this name. EDIT: Turns out it's only chant.",
                    "ref": {
                        "url": "https://lists.gnu.org/archive/html/lilypond-devel/2021-12/msg00120.html",
                        "threaded": true
                    }
                },
                "chantCaesura"
            ],
            "scripts.lvarcomma": [
                {
                    "name": "chantCaesuraInverted",
                    "altOf": "chantCaesura",
                    "note": "This glyph was added for parity, and has no actual use in chant. Still, it remains a chant glyph.",
                    "ref": {
                        "url": "https://lists.gnu.org/archive/html/lilypond-devel/2021-12/msg00120.html",
                        "threaded": true
                    }
                },
                {
                    "name": "breathMarkCommaStraightInverted",
                    "altOf": "breathMarkComma",
                    "status": "rejected",
                    "note": "Is this primarily a chant thing or a modern notation thing? Might inform our name choice. EDIT: See directly above."
                }
            ],

            "scripts.arpeggio": [
                {
                    "name": "wiggleArpeggiatoUp",
                    "status": "contentious",
                    "note": "It looks like these glyphs are rotated in SMuFL. I'm thinking we create new glyphs according to their specs, while preserving our own for backwards compatibility.",
                    "ref": [
                        "https://lists.gnu.org/archive/html/lilypond-devel/2021-09/msg00047.html",
                        "https://lists.w3.org/Archives/Public/public-music-notation/2021Sep/0000.html"
                    ]
                },
                {
                    "name": "wiggleArpeggiatoDown",
                    "status": "contentious"
                }
            ],
            "scripts.trill_element": [
                {
                    "name": "ornamentZigZagLineNoRightEnd",
                    "note": "LilyPond uses trill_element, not trillelement, for trills, right? Edit: Yes.",
                    "ref": "https://lists.gnu.org/archive/html/lilypond-devel/2021-09/msg00047.html"
                },
                {
                    "name": "ornamentZigZagLineWithRightEnd",
                    "note": "SMuFL places this variant at the right end of a trill; since LilyPond just repeats the same trill_element throughout, it'll just be another alias of trill_element."
                }
            ],
            "scripts.arpeggio.arrow.M1": {
                "name": "wiggleArpeggiatoDownArrow",
                "status": "contentious"
            },
            "scripts.arpeggio.arrow.1": {
                "name": "wiggleArpeggiatoUpArrow",
                "status": "contentious"
            },
            "scripts.trillelement": {
                "name": "ornamentZigZagLineShortened",
                "status": "contentious",
                "note": "Does LilyPond use this glyph? What for? Edit: seems to be an old, unused trill_element. I'm making up a SMuFL name for it, but if we delete it there obviously won't be need for one.",
                "ref": "https://lists.gnu.org/archive/html/lilypond-devel/2021-09/msg00047.html"
            },
            "scripts.prall": "ornamentShortTrill",
            "scripts.mordent": "ornamentMordent",
            "scripts.prallprall": "ornamentTremblement",
            "scripts.prallmordent": [
                {
                    "name": "ornamentPrecompTrillWithMordent"
                },
                {
                "name": "ornamentTrillMordent",
                "ligOf": [
                    "ornamentZigZagLineWithRightEnd",
                    "ornamentMiddleVerticalStroke",
                    "ornamentZigZagLineNoRightEnd"
                ],
                    "status": "rejected",
                "note": "This and the following ornaments can be described as ligatures of the SMuFL 'Combining strokes for trills and mordents' glyphs--something for the bucket list.",
                "ref": "https://w3c.github.io/smufl/latest/tables/combining-strokes-for-trills-and-mordents.html"
                }
            ],
            "scripts.upprall": [
                {
                    "name": "ornamentPrecompSlideTrillDAnglebert"
            },
                {
                "name": "ornamentUpTrill",
                    "status": "rejected",
                    "note": "Never mind. I missed that SMuFL already has all these guys!",
                    "ref": "https://w3c.github.io/smufl/latest/tables/precomposed-trills-and-mordents.html"
                }
            ],
            "scripts.upmordent": [
                {
                    "name": "ornamentPrecompSlideTrillBach"
            },
                {
                "name": "ornamentUpMordent",
                    "status": "rejected"
                }
            ],
            "scripts.prallup": [
                {
                    "name": "ornamentPrecompTrillSuffixDandrieu"
            },
                {
                "name": "ornamentTrillUp",
                    "status": "rejected"
                }
            ],
            "scripts.downprall": [
                {
                    "name": "ornamentPrecompMordentUpperPrefix"
            },
                {
                "name": "ornamentDownTrill",
                    "status": "rejected"
                }
            ],
            "scripts.downmordent": [
                {
                    "name": "ornamentPrecompInvertedMordentUpperPrefix"
            },
                {
                "name": "ornamentDownMordent",
                    "status": "rejected"
                }
            ],
            "scripts.pralldown": [
                {
                    "name": "ornamentPrecompTrillLowerSuffix",
                    "status": "contentious",
                    "note": "LilyPond's glyph has three trill element repetitions, while this SMuFL glyph, the closest analog I could find, only has 2. Would it be worth it to give our glyph a new SMuFL name instead of this one?"
            },
                {
                "name": "ornamentTrillDown",
                    "status": "rejected"
                }
            ],
            "scripts.lineprall": [
                {
                    "name": "ornamentPrecompAppoggTrill"
            },
                {
                "name": "ornamentLineTrill",
                    "status": "rejected"
                }
            ],

            "scripts.caesura.curved": "caesuraCurved",
            "scripts.caesura.straight": "caesura",
            "scripts.tickmark": "breathMarkTick",

            "scripts.snappizzicato": "pluckedSnapPizzicatoAbove",

            "scripts.ictus": [
                "chantIctusAbove",
                "chantIctusBelow"
            ],
            "scripts.uaccentus": "chantAccentusAbove",
            "scripts.daccentus": "chantAccentusBelow",
            "scripts.usemicirculus": "chantSemicirculusAbove",
            "scripts.dsemicirculus": "chantSemicirculusBelow",
            "scripts.circulus": [
                "chantCirculusAbove",
                "chantCirculusBelow"
            ],
            "scripts.augmentum": {
                "name": "chantAugmentum",
                "status": "contentious",
                "note": "dots.dotvaticana already fills this function; it appears that this glyph has remained unused since its creation. I think it should be deleted.",
                "ref": {
                    "url": "https://lists.gnu.org/archive/html/lilypond-devel/2021-12/msg00120.html",
                    "threaded": true
                }
            },
            "scripts.usignumcongruentiae": "mensuralSignumUp",
            "scripts.dsignumcongruentiae": {
                "name": "mensuralSignumDown",
                "note": "These symbols appear to be mirrored, but it doesn't seem like much of an issue to me.",
                "ref": "https://lists.gnu.org/archive/html/lilypond-devel/2021-09/msg00047.html"
            }
        }
    },
    {
        "name": "Arrowhead",
        "glyphs": {
            "arrowheads.open.01": "arrowheadOpenRight",
            "arrowheads.open.0M1": "arrowheadOpenLeft",
            "arrowheads.open.11": "arrowheadOpenUp",
            "arrowheads.open.1M1": "arrowheadOpenDown",
            "arrowheads.close.01": "arrowheadBlackRight",
            "arrowheads.close.0M1": "arrowheadBlackLeft",
            "arrowheads.close.11": "arrowheadBlackUp",
            "arrowheads.close.1M1": "arrowheadBlackDown"
        }
    },
    {
        "name": "Bracket-tip",
        "glyphs": {
            "brackettips.up": "bracketTop",
            "brackettips.down": "bracketBottom"
        }
    },
    {
        "name": "Pedal",
        "glyphs": {
            "pedal.*": "keyboardPedalUp",
            "pedal.M": "keyboardPedalHyphen",
            "pedal..": "keyboardPedalDot",
            "pedal.P": "keyboardPedalP",
            "pedal.d": "keyboardPedalD",
            "pedal.e": "keyboardPedalE",
            "pedal.Ped": [
                {
                    "name": "keyboardPedalPed",
                    "status": "contentious",
                    "note": "This is a base glyph in SMuFL. I wonder if there's any way to map a SMuFL base name to a sequence of Emmentaler glyphs...",
                    "ref": "https://lists.gnu.org/archive/html/lilypond-devel/2021-10/msg00082.html"
                },
                {
                    "name": "keyboardPedalPedNoDot",
                    "altOf": "keyboardPedalPed",
                    "note": "This is a recommended stylistic alternate."
                }
            ]
        }
    },
    {
        "name": "Accordion",
        "glyphs": {
            "accordion.discant": "accdnCombRH3RanksEmpty",
            "accordion.dot": "accdnCombDot",
            "accordion.freebass": "accdnCombLH2RanksEmpty",
            "accordion.stdbass": "accdnCombRH4RanksEmpty",
            "accordion.bayanbass": "accdnCombLH3RanksEmptySquare",
            "accordion.oldEE": {
                "name": "accdnOld88",
                "status": "contentious",
                "note": "I can't figure out what this is. -OldEE is a holdover from another way we used to encode accordion symbols, almost all eradicated by 2004. The E's stand for 8' stops (as opposed to 2' [T], 4' [F], or 16' [S]), so it might be an old version of the violin or musette register for the 3-rank system. However, I haven't found it used in any actual sheet music on the internet. Not even my accordionist friend knows what to make of it! Linked are SMuFL's accordion page and a notation guide I found, neither of which have the symbol:",
                "ref": [
                    "https://www.w3.org/2019/03/smufl13/tables/accordion.html",
                    "http://www.ameraccord.com/artwork/2016/Feb16/Composersguidetotheaccordion.pdf"
                ]
            },
            "accordion.push": "accdnPush",
            "accordion.pull": "accdnPull"
        }
    },
    {
        "name": "Tie",
        "glyphs": {
            "ties.lyric.short": "lyricsElisionNarrow",
            "ties.lyric.default": "lyricsElision"
        }
    },
    {
        "name": "Vaticana",
        "glyphs": {
            "clefs.vaticana.do": "chantCclef",
            "clefs.vaticana.do_change": {
                "name": "chantCclefChange",
                "ligOf": [
                    "chantCclef",
                    "clefChangeCombining"
                ]
            },
            "clefs.vaticana.fa": "chantFclef",
            "clefs.vaticana.fa_change": {
                "name": "chantFclefChange",
                "ligOf": [
                    "chantFclef",
                    "clefChangeCombining"
                ]
            },
            "custodes.vaticana.u0": {
                "name": "chantCustosStemUpStaffSpace",
                "altOf": "chantCustosStemUpPosMiddle",
                "note": "SMuFL defines six variants of a Custos: StemUpPos[Middle/Low/Lowest] and StemDownPos[Middle/High/Highest]. We use a different (more correct) system, where 0 = space, 1 = line, and 2 = anywhere. Update 16 Mar '22: changed every instance of PosSpace and PosLine to StaffSpace and StaffLine for consistency with SMuFL's existing kievanNoteHalfStaff[Line/Space] glyphs.",
                "ref": {
                    "url": "https://lists.gnu.org/archive/html/lilypond-devel/2021-12/msg00120.html",
                    "threaded": true
                }
            },
            "custodes.vaticana.u1": {
                "name": "chantCustosStemUpStaffLine",
                "altOf": "chantCustosStemUpPosMiddle"
            },
            "custodes.vaticana.u2": "chantCustosStemUpPosMiddle",
            "custodes.vaticana.d0": {
                "name": "chantCustosStemDownStaffSpace",
                "altOf": "chantCustosStemDownPosMiddle"
            },
            "custodes.vaticana.d1": {
                "name": "chantCustosStemDownStaffLine",
                "altOf": "chantCustosStemDownPosMiddle"
            },
            "custodes.vaticana.d2": "chantCustosStemDownPosMiddle",
            "accidentals.vaticanaM1": "medRenFlatSoftB",
            "accidentals.vaticana0": "medRenNatural",
            "dots.dotvaticana": "chantAugmentum",
            "noteheads.svaticana.punctum": "chantPunctum",
            "noteheads.svaticana.punctum.cavum": "chantPunctumCavum",
            "noteheads.svaticana.linea.punctum": "chantPunctumLinea",
            "noteheads.svaticana.linea.punctum.cavum": "chantPunctumLineaCavum",
            "noteheads.svaticana.inclinatum": "chantPunctumInclinatum",
            "noteheads.svaticana.lpes": "chantPodatusLower",
            "noteheads.svaticana.vlpes": {
                "name": "chantPodatusLowerAdjacent",
                "altOf": "chantPodatusLower",
                "note": "This is a LilyPond-only variant for when the upper and lower notes of a pes (AKA podatus) are adjacent to one another and need to be modified to prevent collision."
            },
            "noteheads.svaticana.upes": "chantPodatusUpper",
            "noteheads.svaticana.vupes": {
                "name": "chantPodatusUpperAdjacent",
                "altOf": "chantPodatusUpper",
                "note": "See above."
            },
            "noteheads.svaticana.plica": "chantDeminutumUpper",
            "noteheads.svaticana.vplica": {
                "name": "chantDeminutumUpperAdjacent",
                "altOf": "chantDeminutumUpper",
                "note": "See above."
            },
            "noteheads.svaticana.epiphonus": [
                {
                    "name": "chantEpiphonus",
                    "status": "contentious",
                    "note": "SMuFL recommends an epiphonus be constructed with chantAuctumAsc, but we have a separate glyph. It might be worth making this an alt of chantAuctumAsc."
                },
                {
                    "name": "chantAuctumAsc",
                    "status": "rejected",
                    "note": "Correction: the ascending and descending aucta are found in Emmentaler elsewhere: noteheads.ssolesmes.auct.[asc/desc]."
                }
            ],
            "noteheads.svaticana.vepiphonus": [
                {
                    "name": "chantEpiphonusAdjacent",
                    "status": "contentious",
                    "note": "See above."
                },
                {
                    "name": "chantAuctumAscAdjacent",
                    "altOf": "chantAuctumAsc",
                    "status": "rejected",
                    "note": "See above."
                }
            ],
            "noteheads.svaticana.reverse.plica": "chantDeminutumLower",
            "noteheads.svaticana.reverse.vplica": {
                "name": "chantDeminutumLowerAdjacent",
                "altOf": "chantDeminutumLower",
                "note": "See above."
            },
            "noteheads.svaticana.inner.cephalicus": [
                {
                    "name": "chantCephalicusInner",
                    "status": "contentious",
                    "note": "I chose 'Inner' to mirror Lily's naming system. This could be an alt of chantAuctumDesc; is it worth it?"
                },
                {
                    "name": "chantAuctumDesc",
                    "status": "rejected",
                    "note": "See above."
                }
            ],
            "noteheads.svaticana.cephalicus": {
                "name": "chantCephalicus",
                "note": "Removed ligature [chantConnectingLineAsc3rd + chantAuctumDesc]; see above."
            },
            "noteheads.svaticana.quilisma": "chantQuilisma"
        }
    },
    {
        "name": "Medicaea",
        "glyphs": {
            "clefs.medicaea.do": {
                "name": "chantCclefMedicaea",
                "altOf": "chantCclef"
            },
            "clefs.medicaea.do_change": {
                "name": "chantCclefMedicaeaChange",
                "ligOf": [
                    "chantCclefMedicaea",
                    "clefChangeCombining"
                ]
            },
            "clefs.medicaea.fa": {
                "name": "chantFclefMedicaea",
                "altOf": "chantFclef"
            },
            "clefs.medicaea.fa_change": {
                "name": "chantFclefMedicaeaChange",
                "ligOf": [
                    "chantFclefMedicaea",
                    "clefChangeCombining"
                ]
            },
            "custodes.medicaea.u0": {
                "name": "chantCustosStemUpStaffSpaceMedicaea",
                "altOf": "chantCustosStemUpPosMiddle"
            },
            "custodes.medicaea.u1": {
                "name": "chantCustosStemUpStaffLineMedicaea",
                "altOf": "chantCustosStemUpPosMiddle"
            },
            "custodes.medicaea.u2": {
                "name": "chantCustosStemUpPosMiddleMedicaea",
                "altOf": "chantCustosStemUpPosMiddle"
            },
            "custodes.medicaea.d0": {
                "name": "chantCustosStemDownStaffSpaceMedicaea",
                "altOf": "chantCustosStemDownPosMiddle"
            },
            "custodes.medicaea.d1": {
                "name": "chantCustosStemDownStaffLineMedicaea",
                "altOf": "chantCustosStemDownPosMiddle"
            },
            "custodes.medicaea.d2": {
                "name": "chantCustosStemDownPosMiddleMedicaea",
                "altOf": "chantCustosStemDownPosMiddle"
            },
            "accidentals.medicaeaM1": {
                "name": "medRenFlatSoftBMedicaea",
                "altOf": "medRenFlatSoftB"
            },
            "noteheads.smedicaea.inclinatum": {
                "name": "chantPunctumInclinatumMedicaea",
                "altOf": "chantPunctumInclinatum"
            },
            "noteheads.smedicaea.punctum": {
                "name": "chantPunctumMedicaea",
                "altOf": "chantPunctum"
            },
            "noteheads.smedicaea.rvirga": [
                {
                    "name": "chantPunctumVirgaInvertedMedicaea",
                    "note": "'Inverted' is attested in SMuFL as a flip on the horizontal axis (or a 180-degree rotation), and so is better suited to this glyph than 'Reversed', which in SMuFL indicates merely a left-right reversal."
                },
                {
                    "name": "chantPunctumVirgaReversedMedicaea",
                    "status": "rejected",
                    "note": "SMuFL has vaticana-style glyphs called chantPunctumVirga(Reversed), but they aren't the same orientation as these Medicaea ones. (We don't have Vaticana virga glyphs anyway--we make ours with a punctum and stem.) Perhaps a better naming scheme is in order? EDIT: See above for a solution.",
                    "ref": {
                        "url": "https://lists.gnu.org/archive/html/lilypond-devel/2021-12/msg00120.html",
                        "threaded": true
                    }
                }
            ],
            "noteheads.smedicaea.virga": {
                "name": "chantPunctumVirgaMedicaea",
                "status": "contentious"
            }
        }
    },
    {
        "name": "Hufnagel",
        "glyphs": {
            "clefs.hufnagel.do": {
                "name": "chantCclefHufnagel",
                "altOf": "chantCclef"
            },
            "clefs.hufnagel.do_change": {
                "name": "chantCclefHufnagelChange",
                "ligOf": [
                    "chantCclefHufnagel",
                    "clefChangeCombining"
                ]
            },
            "clefs.hufnagel.fa": {
                "name": "chantFclefHufnagel",
                "altOf": "chantFclef"
            },
            "clefs.hufnagel.fa_change": {
                "name": "chantFclefHufnagelChange",
                "ligOf": [
                    "chantFclefHufnagel",
                    "clefChangeCombining"
                ]
            },
            "clefs.hufnagel.do.fa": {
                "name": "chantCFclefHufnagel",
                "altOf": "chantCclef",
                "note": "I'm calling this an alternate of the C clef because its center is defined in parmesan-clefs.mf as the center of the C clef part."
            },
            "clefs.hufnagel.do.fa_change": {
                "name": "chantCFclefHufnagelChange",
                "ligOf": [
                    "chantCFclefHufnagel",
                    "clefChangeCombining"
                ]
            },
            "custodes.hufnagel.u0": {
                "name": "chantCustosStemUpStaffSpaceHufnagel",
                "altOf": "chantCustosStemUpPosMiddle"
            },
            "custodes.hufnagel.u1": {
                "name": "chantCustosStemUpStaffLineHufnagel",
                "altOf": "chantCustosStemUpPosMiddle"
            },
            "custodes.hufnagel.u2": [
                "mensuralCustosCheckmark",
                {
                    "name": "chantCustosStemUpPosMiddleHufnagel",
                    "altOf": "chantCustosStemUpPosMiddle"
                }
            ],
            "custodes.hufnagel.d0": {
                "name": "chantCustosStemDownStaffSpaceHufnagel",
                "altOf": "chantCustosStemDownPosMiddle"
            },
            "custodes.hufnagel.d1": {
                "name": "chantCustosStemDownStaffLineHufnagel",
                "altOf": "chantCustosStemDownPosMiddle"
            },
            "custodes.hufnagel.d2": {
                "name": "chantCustosStemDownPosMiddleHufnagel",
                "altOf": "chantCustosStemDownPosMiddle"
            },
            "accidentals.hufnagelM1": {
                "name": "medRenFlatSoftBHufnagel",
                "altOf": "medRenFlatSoftB"
            },
            "noteheads.shufnagel.punctum": {
                "name": "chantPunctumHufnagel",
                "altOf": "chantPunctum"
            },
            "noteheads.shufnagel.virga": {
                "name": "chantPunctumVirgaHufnagel",
                "note": "It seems we ought to add chantPunctumVirga(Reversed) to our Vaticana set, even if it's only used by non-LilyPond programs. That way we can make this and the Medicaea variants proper alternates of expected SMuFL glyphs. EDIT: No, we shouldn't. This is way too niche.",
                "ref": {
                    "url": "https://lists.gnu.org/archive/html/lilypond-devel/2021-12/msg00120.html",
                    "threaded": true
                }
        },
            "noteheads.shufnagel.lpes": {
                "name": "chantPodatusLowerHufnagel",
                "altOf": "chantPodatusLower"
            }
        }
    },
    {
        "name": "Mensural",
        "glyphs": {
            "rests.M3mensural": "mensuralRestLongaPerfecta",
            "rests.M2mensural": "mensuralRestLongaImperfecta",
            "rests.M1mensural": "mensuralRestBrevis",
            "rests.0mensural": "mensuralRestSemibrevis",
            "rests.1mensural": "mensuralRestMinima",
            "rests.2mensural": "mensuralRestSemiminima",
            "rests.3mensural": "mensuralRestFusa",
            "rests.4mensural": "mensuralRestSemifusa",

            "clefs.mensural.c": {
                "name": "mensuralCclefVoid",
                "altOf": "mensuralCclef"
            },
            "clefs.mensural.c_change": [
                {
                    "name": "mensuralCclefVoidChange",
                    "ligOf": [
                        "mensuralCclefVoid",
                        "clefChangeCombining"
                    ]
                }
            ],
            "clefs.blackmensural.c": {
                "name": "mensuralCclefBlack",
                "altOf": "mensuralCclef"
            },
            "clefs.blackmensural.c_change": {
                "name": "mensuralCclefBlackChange",
                "ligOf": [
                    "mensuralCclefBlack",
                    "clefChangeCombining"
                ]
            },
            "clefs.mensural.f": "mensuralFclef",
            "clefs.mensural.f_change": {
                "name": "mensuralFclefChange",
                "ligOf": [
                    "mensuralFclef",
                    "clefChangeCombining"
                ]
            },
            "clefs.mensural.g": {
                "name": "mensuralGclef",
                "note": "Emmentaler has a known issue where the G clef looks identical to the Petrucci G clef."
            },
            "clefs.mensural.g_change": {
                "name": "mensuralGclefChange",
                "ligOf": [
                    "mensuralGclef",
                    "clefChangeCombining"
                ]
            },

            "custodes.mensural.u0": {
                "name": "mensuralCustosUpStaffSpace",
                "altOf": "mensuralCustosUp"
            },
            "custodes.mensural.u1": {
                "name": "mensuralCustosUpStaffLine",
                "altOf": "mensuralCustosUp"
            },
            "custodes.mensural.u2": "mensuralCustosUp",
            "custodes.mensural.d0": {
                "name": "mensuralCustosDownStaffSpace",
                "altOf": "mensuralCustosDown"
            },
            "custodes.mensural.d1": {
                "name": "mensuralCustosDownStaffLine",
                "altOf": "mensuralCustosDown"
            },
            "custodes.mensural.d2": "mensuralCustosDown",

            "accidentals.mensural1": "medRenSharpCroix",
            "accidentals.mensuralM1": {
                "name": "medRenFlatSoftBOld",
                "altOf": "medRenFlatSoftB"
            },

            "flags.mensuralu03": {
                "name": "mensuralFlag8thUpStaffSpace",
                "altOf": "flag8thUp"
            },
            "flags.mensuralu13": {
                "name": "mensuralFlag8thUpStaffLine",
                "altOf": "flag8thUp"
            },
            "flags.mensuralu23": {
                "name": "mensuralFlag8thUp",
                "altOf": "flag8thUp"
            },
            "flags.mensurald03": {
                "name": "mensuralFlag8thDownStaffSpace",
                "altOf": "flag8thDown"
            },
            "flags.mensurald13": {
                "name": "mensuralFlag8thDownStaffLine",
                "altOf": "flag8thDown"
            },
            "flags.mensurald23": {
                "name": "mensuralFlag8thDown",
                "altOf": "flag8thDown"
            },
            "flags.mensuralu04": {
                "name": "mensuralFlag16thUpStaffSpace",
                "altOf": "flag16thUp"
            },
            "flags.mensuralu14": {
                "name": "mensuralFlag16thUpStaffLine",
                "altOf": "flag16thUp"
            },
            "flags.mensuralu24": {
                "name": "mensuralFlag16thUp",
                "altOf": "flag16thUp"
            },
            "flags.mensurald04": {
                "name": "mensuralFlag16thDownStaffSpace",
                "altOf": "flag16thDown"
            },
            "flags.mensurald14": {
                "name": "mensuralFlag16thDownStaffLine",
                "altOf": "flag16thDown"
            },
            "flags.mensurald24": {
                "name": "mensuralFlag16thDown",
                "altOf": "flag16thDown"
            },
            "flags.mensuralu05": {
                "name": "mensuralFlag32ndUpStaffSpace",
                "altOf": "flag32ndUp"
            },
            "flags.mensuralu15": {
                "name": "mensuralFlag32ndUpStaffLine",
                "altOf": "flag32ndUp"
            },
            "flags.mensuralu25": {
                "name": "mensuralFlag32ndUp",
                "altOf": "flag32ndUp"
            },
            "flags.mensurald05": {
                "name": "mensuralFlag32ndDownStaffSpace",
                "altOf": "flag32ndDown"
            },
            "flags.mensurald15": {
                "name": "mensuralFlag32ndDownStaffLine",
                "altOf": "flag32ndDown"
            },
            "flags.mensurald25": {
                "name": "mensuralFlag32ndDown",
                "altOf": "flag32ndDown"
            },
            "flags.mensuralu06": {
                "name": "mensuralFlag64thUpStaffSpace",
                "altOf": "flag64thUp"
            },
            "flags.mensuralu16": {
                "name": "mensuralFlag64thUpStaffLine",
                "altOf": "flag64thUp"
            },
            "flags.mensuralu26": {
                "name": "mensuralFlag64thUp",
                "altOf": "flag64thUp"
            },
            "flags.mensurald06": {
                "name": "mensuralFlag64thDownStaffSpace",
                "altOf": "flag64thDown"
            },
            "flags.mensurald16": {
                "name": "mensuralFlag64thDownStaffLine",
                "altOf": "flag64thDown"
            },
            "flags.mensurald26": {
                "name": "mensuralFlag64thDown",
                "altOf": "flag64thDown"
            },

            "timesig.mensural44": "mensuralProlation6",
            "timesig.mensural22": "mensuralProlation9",
            "timesig.mensural32": "mensuralProlation2",
            "timesig.mensural64": "mensuralProlation5",
            "timesig.mensural94": "mensuralProlation1",
            "timesig.mensural34": "mensuralProlation3",
            "timesig.mensural68": "mensuralProlation8",
            "timesig.mensural98": "mensuralProlation4",
            "timesig.mensural48": "mensuralProlation7",
            "timesig.mensural68alt": "mensuralProlation11",
            "timesig.mensural24": "mensuralProlation10",

            "noteheads.uM3mensural": {
                "name": "mensuralMaximaVoidStemUpRight",
                "note": "In SMuFL this glyph and the next three glyphs with stems are encoded as ligatures using stem characters we don't have."
            },
            "noteheads.dM3mensural": {
                "name": "mensuralMaximaVoidStemDownRight"
            },
            "noteheads.sM3ligmensural": "mensuralNoteheadMaximaVoid",
            "noteheads.uM2mensural": {
                "name": "mensuralLongaVoidStemUpRight"
            },
            "noteheads.dM2mensural": {
                "name": "mensuralLongaVoidStemDownRight"
            },
            "noteheads.sM2ligmensural": "mensuralLongaVoidLigature",
            "noteheads.sM1mensural": "mensuralNoteheadLongaVoid",

            "noteheads.urM3mensural": {
                "name": "mensuralMaximaVoidStemUpRightStaffSpace",
                "altOf": "mensuralMaximaVoidStemUpRight",
                "note": "Reduced-hole noteheads: LP uses these noteheads for spaces rather than lines.<br><br>I haven't seen precedent for declaring a stylistic alternate of a non-base glyph, but I don't think it will break anything."
            },
            "noteheads.drM3mensural": {
                "name": "mensuralMaximaVoidStemDownRightStaffSpace",
                "altOf": "mensuralMaximaVoidStemDownRight"
            },
            "noteheads.srM3ligmensural": {
                "name": "mensuralNoteheadMaximaVoidStaffSpace",
                "altOf": "mensuralNoteheadMaximaVoid"
            },
            "noteheads.urM2mensural": {
                "name": "mensuralLongaVoidStemUpRightStaffSpace",
                "altOf": "mensuralLongaVoidStemUpRight"
            },
            "noteheads.drM2mensural": {
                "name": "mensuralLongaVoidStemDownRightStaffSpace",
                "altOf": "mensuralLongaVoidStemDownRight"
            },
            "noteheads.srM2ligmensural": {
                "name": "mensuralLongaVoidLigatureStaffSpace",
                "altOf": "mensuralLongaVoidLigature",
                "note": "This is the first time I've felt tempted to declare a stylistic alternate of a glyph SMuFL doesn't have at all. Might prompt me to revisit how I declare alternates."
            },
            "noteheads.srM1mensural": {
                "name": "mensuralNoteheadLongaVoidStaffSpace",
                "altOf": "mensuralNoteheadLongaVoid"
            },

            "noteheads.uM3semimensural": {
                "name": "mensuralMaximaBlackVoidStemUpRight"
            },
            "noteheads.dM3semimensural": {
                "name": "mensuralMaximaBlackVoidStemDownRight"
            },
            "noteheads.sM3semiligmensural": "mensuralNoteheadMaximaBlackVoid",
            "noteheads.uM2semimensural": {
                "name": "mensuralLongaBlackVoidStemUpRight"
            },
            "noteheads.dM2semimensural": {
                "name": "mensuralLongaBlackVoidStemDownRight"
            },
            "noteheads.sM2semiligmensural": "mensuralLongaBlackVoidLigature",
            "noteheads.sM1semimensural": "mensuralNoteheadLongaBlackVoid",

            "noteheads.urM3semimensural": {
                "name": "mensuralMaximaBlackVoidStemUpRightStaffSpace",
                "altOf": "mensuralMaximaBlackVoidStemUpRight"
            },
            "noteheads.drM3semimensural": {
                "name": "mensuralMaximaBlackVoidStemDownRightStaffSpace",
                "altOf": "mensuralMaximaBlackVoidStemDownRight"
            },
            "noteheads.srM3semiligmensural": {
                "name": "mensuralNoteheadMaximaBlackVoidStaffSpace",
                "altOf": "mensuralNoteheadMaximaBlackVoid"
            },
            "noteheads.urM2semimensural": {
                "name": "mensuralLongaBlackVoidStemUpRightStaffSpace",
                "altOf": "mensuralLongaBlackVoidStemUpRight"
            },
            "noteheads.drM2semimensural": {
                "name": "mensuralLongaBlackVoidStemDownRightStaffSpace",
                "altOf": "mensuralLongaBlackVoidStemDownRight"
            },
            "noteheads.srM2semiligmensural": {
                "name": "mensuralLongaBlackVoidLigatureStaffSpace",
                "altOf": "mensuralLongaBlackVoidLigature"
            },
            "noteheads.srM1semimensural": {
                "name": "mensuralNoteheadLongaBlackVoidStaffSpace",
                "altOf": "mensuralNoteheadLongaBlackVoid"
            },

            "noteheads.uM3blackmensural": {
                "name": "mensuralMaximaBlackStemUpRight"
            },
            "noteheads.dM3blackmensural": {
                "name": "mensuralMaximaBlackStemDownRight"
            },
            "noteheads.sM3blackligmensural": "mensuralNoteheadMaximaBlack",
            "noteheads.uM2blackmensural": {
                "name": "mensuralLongaBlackStemUpRight"
            },
            "noteheads.dM2blackmensural": {
                "name": "mensuralLongaBlackStemDownRight"
            },
            "noteheads.sM2blackligmensural": "mensuralNoteheadLongaBlackLigature",
            "noteheads.sM1blackmensural": "mensuralNoteheadLongaBlack",

            "noteheads.s0mensural": "mensuralNoteheadSemibrevisVoid",
            "noteheads.s1mensural": "mensuralNoteheadMinimaWhite",
            "noteheads.s2mensural": "mensuralNoteheadSemiminimaWhite",
            "noteheads.s0blackmensural": "mensuralNoteheadSemibrevisBlack"
        }
    },
    {
        "name": "Neomensural",
        "glyphs": {
            "rests.M3neomensural": [
                {
                    "name": "neomensuralRestMaxima",
                    "ligOf": [
                        "neomensuralRestLongaImperfecta",
                        "neomensuralRestLongaImperfecta"
                    ]
                },
                {
                    "name": "neomensuralRestLongaPerfecta",
                    "status": "rejected",
                    "note": "SMuFL's mensuralLongaPerfecta looks different--one full-stave bar instead of two half-stave bars. But it means the same thing, right? Edit 20 Mar '22: It doesn't.",
                    "ref": {
                        "url": "https://lists.gnu.org/archive/html/lilypond-devel/2022-03/msg00055.html",
                        "threaded": true
                    },
                    "altOf": "mensuralRestLongaPerfecta"
                }
            ],
            "rests.M2neomensural": {
                "name": "neomensuralRestLongaImperfecta",
                "altOf": "mensuralRestLongaImperfecta"
            },
            "rests.M1neomensural": {
                "name": "neomensuralRestBrevis",
                "altOf": "mensuralRestBrevis"
            },
            "rests.0neomensural": {
                "name": "neomensuralRestSemibrevis",
                "altOf": "mensuralRestSemibrevis"
            },
            "rests.1neomensural": {
                "name": "neomensuralRestMinima",
                "altOf": "mensuralRestMinima"
            },
            "rests.2neomensural": {
                "name": "neomensuralRestSemiminima",
                "altOf": "mensuralRestSemiminima"
            },
            "rests.3neomensural": {
                "name": "neomensuralRestFusa",
                "altOf": "mensuralRestFusa"
            },
            "rests.4neomensural": {
                "name": "neomensuralRestSemifusa",
                "altOf": "mensuralRestSemifusa"
            },

            "clefs.neomensural.c": "mensuralCclef",
            "clefs.neomensural.c_change": {
                "name": "mensuralCclefChange",
                "ligOf": [
                    "mensuralCclef",
                    "clefChangeCombining"
                ]
            },

            "timesig.neomensural44": {
                "name": "neomensuralProlation6",
                "altOf": "mensuralProlation6"
            },
            "timesig.neomensural22": {
                "name": "neomensuralProlation9",
                "altOf": "mensuralProlation9"
            },

            "timesig.neomensural32": {
                "name": "neomensuralProlation2",
                "altOf": "mensuralProlation2"
            },
            "timesig.neomensural64": {
                "name": "neomensuralProlation5",
                "altOf": "mensuralProlation5"
            },
            "timesig.neomensural94": {
                "name": "neomensuralProlation1",
                "altOf": "mensuralProlation1"
            },

            "timesig.neomensural34": {
                "name": "neomensuralProlation3",
                "altOf": "mensuralProlation3"
            },
            "timesig.neomensural68": {
                "name": "neomensuralProlation8",
                "altOf": "mensuralProlation8"
            },
            "timesig.neomensural98": {
                "name": "neomensuralProlation4",
                "altOf": "mensuralProlation4"
            },

            "timesig.neomensural48": {
                "name": "neomensuralProlation7",
                "altOf": "mensuralProlation7"
            },
            "timesig.neomensural68alt": {
                "name": "neomensuralProlation11",
                "altOf": "mensuralProlation11"
            },
            "timesig.neomensural24": {
                "name": "neomensuralProlation10",
                "altOf": "mensuralProlation10"
            },

            "noteheads.uM3neomensural": {
                "name": "neomensuralMaximaVoidStemUpRight",
                "altOf": "mensuralMaximaVoidStemUpRight"
            },
            "noteheads.dM3neomensural": {
                "name": "neomensuralMaximaVoidStemDownRight",
                "altOf": "mensuralMaximaVoidStemDownRight"
            },
            "noteheads.uM2neomensural": {
                "name": "neomensuralLongaVoidStemUpRight",
                "altOf": "mensuralLongaVoidStemUpRight"
            },
            "noteheads.dM2neomensural": {
                "name": "neomensuralLongaVoidStemDownRight",
                "altOf": "mensuralLongaVoidStemDownRight"
            },
            "noteheads.sM1neomensural": {
                "name": "neomensuralNoteheadLongaVoid",
                "altOf": "mensuralNoteheadLongaVoid"
            },

            "noteheads.urM3neomensural": {
                "name": "neomensuralMaximaVoidStemUpRightStaffSpace",
                "altOf": "mensuralMaximaVoidStemUpRight",
                "status": "contentious",
                "note": "It may be more helpful to label double alternates like these as alternates of both the neomensural- and the -StaffSpace variants, rather than of the base glyphs included in Bravura."
            },
            "noteheads.drM3neomensural": {
                "name": "neomensuralMaximaVoidStemDownRightStaffSpace",
                "altOf": "mensuralMaximaVoidStemDownRight",
                "status": "contentious"
            },
            "noteheads.urM2neomensural": {
                "name": "neomensuralLongaVoidStemUpRightStaffSpace",
                "altOf": "mensuralLongaVoidStemUpRight",
                "status": "contentious"
            },
            "noteheads.drM2neomensural": {
                "name": "neomensuralLongaVoidStemDownRightStaffSpace",
                "altOf": "mensuralLongaVoidStemDownRight",
                "status": "contentious"
            },
            "noteheads.srM1neomensural": {
                "name": "neomensuralNoteheadLongaVoidStaffSpace",
                "altOf": "mensuralNoteheadLongaVoid",
                "status": "contentious"
            },

            "noteheads.s0neomensural": {
                "name": "neomensuralNoteheadSemibrevisVoid",
                "altOf": "mensuralNoteheadSemibrevisVoid"
            },
            "noteheads.s1neomensural": {
                "name": "neomensuralNoteheadMinimaWhite",
                "altOf": "mensuralNoteheadMinimaWhite"
            },
            "noteheads.s2neomensural": {
                "name": "neomensuralNoteheadSemiminimaWhite",
                "altOf": "mensuralNoteheadSemiminimaWhite"
            }
        }
    },
    {
        "name": "Petrucci",
        "glyphs": {
            "clefs.petrucci.c1": "mensuralCclefPetrucciPosLowest",
            "clefs.petrucci.c1_change": {
                "name": "mensuralCclefPetrucciPosLowestChange",
                "ligOf": [
                    "mensuralCclefPetrucciPosLowest",
                    "clefChangeCombining"
                ]
            },
            "clefs.petrucci.c2": "mensuralCclefPetrucciPosLow",
            "clefs.petrucci.c2_change": {
                "name": "mensuralCclefPetrucciPosLowChange",
                "ligOf": [
                    "mensuralCclefPetrucciPosLow",
                    "clefChangeCombining"
                ]
            },
            "clefs.petrucci.c3": "mensuralCclefPetrucciPosMiddle",
            "clefs.petrucci.c3_change": {
                "name": "mensuralCclefPetrucciPosMiddleChange",
                "ligOf": [
                    "mensuralCclefPetrucciPosMiddle",
                    "clefChangeCombining"
                ]
            },
            "clefs.petrucci.c4": "mensuralCclefPetrucciPosHigh",
            "clefs.petrucci.c4_change": {
                "name": "mensuralCclefPetrucciPosHighChange",
                "ligOf": [
                    "mensuralCclefPetrucciPosHigh",
                    "clefChangeCombining"
                ]
            },
            "clefs.petrucci.c5": "mensuralCclefPetrucciPosHighest",
            "clefs.petrucci.c5_change": {
                "name": "mensuralCclefPetrucciPosHighestChange",
                "ligOf": [
                    "mensuralCclefPetrucciPosHighest",
                    "clefChangeCombining"
                ]
            },
            "clefs.petrucci.f": "mensuralFclefPetrucci",
            "clefs.petrucci.f_change": {
                "name": "mensuralFclefPetrucciChange",
                "ligOf": [
                    "mensuralFclefPetrucci",
                    "clefChangeCombining"
                ]
            },
            "clefs.petrucci.g": "mensuralGclefPetrucci",
            "clefs.petrucci.g_change": {
                "name": "mensuralGclefPetrucciChange",
                "ligOf": [
                    "mensuralGclefPetrucci",
                    "clefChangeCombining"
                ]
            },

            "noteheads.s0petrucci": {
                "name": "mensuralNoteheadSemibrevisVoidPetrucci",
                "altOf": "mensuralNoteheadSemibrevisVoid"
            },
            "noteheads.s1petrucci": {
                "name": "mensuralNoteheadMinimaWhitePetrucci",
                "altOf": "mensuralNoteheadMinimaWhite"
            },
            "noteheads.s2petrucci": {
                "name": "mensuralNoteheadSemiminimaWhitePetrucci",
                "altOf": "mensuralNoteheadSemiminimaWhite"
            },

            "noteheads.s0blackpetrucci": {
                "name": "mensuralNoteheadSemibrevisBlackPetrucci",
                "altOf": "mensuralNoteheadSemibrevisBlack"
            },
            "noteheads.s1blackpetrucci": {
                "name": "mensuralNoteheadMinimaBlackPetrucci",
                "note": "This and the following glyph do not have regular mensural base glyphs in SMuFL."
            },
            "noteheads.s2blackpetrucci": {
                "name": "mensuralNoteheadSemiminimaBlackPetrucci"
            }
        }
    },
    {
        "name": "Solesmes",
        "glyphs": {
            "noteheads.ssolesmes.incl.parvum": "chantPunctumInclinatumDeminutum",

            "noteheads.ssolesmes.auct.asc": "chantAuctumAsc",
            "noteheads.ssolesmes.auct.desc": "chantAuctumDesc",

            "noteheads.ssolesmes.incl.auctum": "chantPunctumInclinatumAuctum",

            "noteheads.ssolesmes.stropha": "chantStrophicus",
            "noteheads.ssolesmes.stropha.aucta": "chantStrophicusAuctus",

            "noteheads.ssolesmes.oriscus": "chantOriscusAscending"
        }
    },
    {
        "name": "Kievan",
        "glyphs": {
            "clefs.kievan.do": "kievanCClef",
            "clefs.kievan.do_change": {
                "name": "kievanCClefChange",
                "ligOf": [
                    "kievanCClef",
                    "clefChangeCombining"
                ]
            },

            "accidentals.kievan1": "kievanAccidentalSharp",
            "accidentals.kievanM1": "kievanAccidentalFlat",

            "scripts.barline.kievan": "kievanEndingSymbol",

            "dots.dotkievan": "kievanAugmentationDot",

            "noteheads.sM2kievan": "kievanNoteWholeFinal",
            "noteheads.sM1kievan": "kievanNoteReciting",
            "noteheads.s0kievan": "kievanNoteWhole",
            "noteheads.d2kievan": "kievanNoteQuarterStemDown",
            "noteheads.u2kievan": "kievanNoteQuarterStemUp",
            "noteheads.s1kievan": "kievanNoteHalfStaffLine",
            "noteheads.sr1kievan": "kievanNoteHalfStaffSpace",
            "noteheads.d3kievan": "kievanNote8thStemDown",
            "noteheads.u3kievan": "kievanNote8thStemUp"
        }
    }
]