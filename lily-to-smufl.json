[
    {
        "name": "Clef",
        "glyphs": {
            "clefs.C": "cClef",
            "clefs.C_change": "cClefChange",
            "clefs.varC": {
                "name": "cClefFrench20C",
                "altOf": "cClef"
            },
            "clefs.varC_change": {
                "name": "cClefFrench20CChange",
                "altOf": "cClefChange"
            },
            "clefs.F": "fClef",
            "clefs.F_change": "fClefChange",
            "clefs.G": "gClef",
            "clefs.G_change": "gClefChange",
            "clefs.GG": "gClef8vbOld",
            "clefs.GG_change": {
                "name": "gClef8vbOldChange",
                "ligOf": [
                    "gClef8vbOld",
                    "clefChangeCombining"
                ]
            },
            "clefs.tenorG": "gClef8vbCClef",
            "clefs.tenorG_change": {
                "name": "gClef8vbCClefChange",
                "ligOf": [
                    "gClef8vbCClef",
                    "clefChangeCombining"
                ]
            },
            "clefs.percussion": "unpitchedPercussionClef1",
            "clefs.percussion_change": {
                "name": "unpitchedPercussionClef1Change",
                "ligOf": [
                    "unpitchedPercussionClef1",
                    "clefChangeCombining"
                ]
            },
            "clefs.varpercussion": "unpitchedPercussionClef2",
            "clefs.varpercussion_change": {
                "name": "unpitchedPercussionClef2Change",
                "ligOf": [
                    "unpitchedPercussionClef2",
                    "clefChangeCombining"
                ]
            },
            "clefs.tab": [
                {
                    "name": "6stringTabClef",
                    "note": "SMuFL defines two tab clefs, one for a 4-line staff and one for 6. I plan to make them both aliases for clefs.tab."
                },
                "4stringTabClef"
            ],
            "clefs.tab_change": [
                {
                    "name": "6stringTabClefChange",
                    "ligOf": [
                        "6stringTabClef",
                        "clefChangeCombining"
                    ]
                },
                {
                    "name": "4stringTabClefChange",
                    "ligOf": [
                        "4stringTabClef",
                        "clefChangeCombining"
                    ]
                }
            ],
            "clefs.change_combining": [
                {
                    "name": "clefChangeCombining",
                    "note": "Emmentaler needs this combining glyph in order for the ligature clefs to work as expected."
                }
            ]
        }
    },
    {
        "name": "Time Signature",
        "glyphs": {
            "timesig.C44": "timeSigCommon",
            "timesig.C22": "timeSigCutCommon"
        }
    },
    {
        "name": "Number",
        "glyphs": {
            "plus": [
                {
                    "name": "timeSigPlus",
                    "note": "SMuFL distinguishes timeSigPlus, which adds entire signatures together, from timeSigPlusSmall, which only adds numerators. I plan on making them both aliases of plus."
                },
                "timeSigPlusSmall"
            ],
            "comma": "timeSigComma",
            "hyphen": "timeSigMinus",
            "period": [
                {
                    "name": "timeSigDot",
                    "note": "Since most of the related symbols begin with timeSig-, I opted to do the same here."
                },
                {
                    "name": "timeSigPeriod",
                    "status": "rejected",
                    "note": "-Dot is attested in SMuFL (keyboardPedalDot); -Period is not.",
                    "ref": "https://lists.w3.org/Archives/Public/public-music-notation/2021Jun/0024.html"
                }
            ],
            "zero": [
                {
                    "name": "timeSig0",
                    "note": "SMuFL specifies three distinct number sets; timeSigX seems to match ours the best. (1-9 are the same as 0.)"
                }
            ],
            "zero.small": [
                {
                    "name": "figbass0",
                    "status": "contentious",
                    "note": "A xxx.small number set will probably need to be created in the future.",
                    "ref": {
                        "url": "https://lists.gnu.org/archive/html/lilypond-devel/2021-06/msg00035.html",
                        "threaded": true
                    }
                },
                {
                    "name": "fingering0",
                    "status": "contentious",
                    "note": ""
                }
            ]
        }
    },
    {
        "name": "Accidental",
        "glyphs": {
            "accidentals.sharp": [
                "accidentalSharp",
                {
                    "name": "accidentalWyschnegradsky6TwelfthsSharp",
                    "status": "contentious",
                    "note": "I wonder if it's fair to users if we claim to support Wyschnegradsky accidentals if we only really have three of SMuFL's full set of 22."
                },
                "accidentalBakiyeSharp",
                "accidentalSharpArabic"
            ],
            "accidentals.sharp.arrowup": [
                "accidentalThreeQuarterTonesSharpArrowUp",
                {
                    "name": "accidentalSharpOneArrowUp",
                    "status": "rejected",
                    "note": "The arrow is in a different place. This fact, along with the differing arrowhead style, suggests we shouldn't encode this accidental set or the Stockhausen set at all."
                },
                {
                    "name": "accidentalSharpRaisedStockhausen",
                    "status": "rejected"
                }
            ],
            "accidentals.sharp.arrowdown": [
                "accidentalQuarterToneSharpArrowDown",
                {
                    "name": "accidentalSharpOneArrowDown",
                    "status": "rejected",
                    "note": "See above."
                },
                {
                    "name": "accidentalSharpLoweredStockhausen",
                    "status": "rejected"
                }
            ],
            "accidentals.sharp.arrowboth": {
                "name": "accidentalSharpArrowsUpAndDown",
                "note": "We could name it -TwoArrows or -BothArrows, but I think this is fine."
            },
            "accidentals.sharp.slashslash.stem": [
                "accidentalQuarterToneSharpStein",
                {
                    "name": "accidentalKomaSharp",
                    "note": "This one seems a tad wider than the others, but I don't see it as too much of a problem."
                },
                "accidentalQuarterToneSharpArabic"
            ],
            "accidentals.sharp.slashslashslash.stemstem": [
                "accidentalBuyukMucennebSharp",
                {
                    "name": "accidentalThreeQuarterTonesSharpStockhausen",
                    "status": "rejected",
                    "note": "Resemblance is dubious. Besides, given our other Stockhausen troubles, it's probably best not to bother."
                }
            ],
            "accidentals.sharp.slashslashslash.stem": "accidentalKucukMucennebSharp",
            "accidentals.sharp.slash.stem": [
                {
                    "name": "accidentalRaiseOneUndecimalQuartertone",
                    "note": "Doesn't quite match the Emmentaler glyph's proportions, but it doesn't seem like too much of a problem to me."
                },
                {
                    "name": "accidentalOneQuarterToneSharpStockhausen",
                    "status": "rejected",
                    "note": "Doesn't match the Emmentaler glyph's proportions; plus, it's Stockhausen."
                }
            ],
            "accidentals.sharp.slashslash.stemstemstem": [
                "accidentalThreeQuarterTonesSharpStein",
                {
                    "name": "accidentalWyschnegradsky9TwelfthsSharp",
                    "status": "contentious",
                    "note": "See above on Wyschnegradsky accidentals."
                },
                "accidentalThreeQuarterTonesSharpArabic"
            ],
            "accidentals.doublesharp": [
                "accidentalDoubleSharp",
                "accidentalDoubleSharpArabic"
            ],
            "accidentals.natural": [
                "accidentalNatural",
                "accidentalNaturalArabic"
            ],
            "accidentals.natural.arrowup": [
                "accidentalQuarterToneSharpNaturalArrowUp",
                {
                    "name": "accidentalNaturalOneArrowUp",
                    "status": "rejected",
                    "note": "See the above note on the arrowed sharps."
                },
                {
                    "name": "accidentalNaturalRaisedStockhausen",
                    "status": "rejected"
                }
            ],
            "accidentals.natural.arrowdown": [
                "accidentalQuarterToneFlatNaturalArrowDown",
                {
                    "name": "accidentalNaturalOneArrowDown",
                    "status": "rejected",
                    "note": "See the above note on the arrowed sharps."
                },
                {
                    "name": "accidentalNaturalLoweredStockhausen",
                    "status": "rejected"
                }
            ],
            "accidentals.natural.arrowboth": [
                {
                    "name": "accidentalNaturalArrowsUpAndDown",
                    "note": "We could name it -TwoArrows or -BothArrows, but I think this is fine."
                }
            ],
            "accidentals.flat": [
                "accidentalFlat",
                {
                    "name": "accidentalWyschnegradsky6TwelfthsFlat",
                    "status": "contentious",
                    "note": "See above on Wyschnegradsky accidentals."
                },
                "accidentalKucukMucennebFlat",
                "accidentalFlatArabic"
            ],
            "accidentals.flat.arrowup": [
                "accidentalQuarterToneFlatArrowUp",
                {
                    "name": "accidentalFlatOneArrowUp",
                    "status": "rejected",
                    "note": "See the above note on the arrowed sharps."
                },
                {
                    "name": "accidentalFlatRaisedStockhausen",
                    "status": "rejected"
                }
            ],
            "accidentals.flat.arrowdown": [
                "accidentalThreeQuarterTonesFlatArrowDown",
                {
                    "name": "accidentalFlatOneArrowDown",
                    "status": "rejected",
                    "note": "See the above note on the arrowed sharps."
                },
                {
                    "name": "accidentalFlatLoweredStockhausen",
                    "status": "rejected"
                }
            ],
            "accidentals.flat.arrowboth": {
                "name": "accidentalFlatArrowsUpAndDown",
                "note": "We could name it -TwoArrows or -BothArrows, but I think this is fine."
            },
            "accidentals.flat.slash": [
                "accidentalBakiyeFlat",
                {
                    "name": "accidentalOneQuarterToneFlatStockhausen",
                    "status": "rejected",
                    "note": "Honestly, this one looks identical to the others. But if I'm not doing Stockhausen, I'm not doing Stockhausen."
                },
                "accidentalQuarterToneFlatArabic"
            ],
            "accidentals.flat.slashslash": "accidentalBuyukMucennebFlat",
            "accidentals.mirroredflat.flat": "accidentalThreeQuarterTonesFlatCouper",
            "accidentals.mirroredflat": [
                "accidentalQuarterToneFlatStein",
                "accidentalLowerOneUndecimalQuartertone",
                "accidentalKomaFlat"
            ],
            "accidentals.mirroredflat.backslash": [
                {
                    "name": "accidentalReversedFlatSlash",
                    "note": "What accidental system uses this? Might inform our name choice."
                },
                {
                    "name": "accidentalMirroredFlatSlash",
                    "status": "rejected",
                    "note": "-Reversed- is attested in SMuFL (e.g. accidentalReversedFlatArrowUp); -Mirrored- is not.",
                    "ref": "https://lists.w3.org/Archives/Public/public-music-notation/2021Jun/0024.html"
                }
            ],
            "accidentals.flatflat": [
                "accidentalDoubleFlat",
                "accidentalDoubleFlatArabic"
            ],
            "accidentals.flatflat.slash": {
                "name": "accidentalDoubleFlatSlash",
                "note": "What accidental system uses this? Might inform our name choice."
            },
            "accidentals.rightparen": "accidentalParensRight",
            "accidentals.leftparen": "accidentalParensLeft"
        }
    },
    {
        "name": "Default Notehead",
        "glyphs": {
            "noteheads.uM2": {
                "name": "noteheadLongaUp",
                "status": "contentious",
                "note": "No analog found in Bravura. Because of their hardcoded stems, these glyphs look more like Bravura's \"Individual notes\" glyphs (i.e. noteHalfUp). However, those glyphs are not meant for direct music engraving."
            },
            "noteheads.dM2": {
                "name": "noteheadLongaDown",
                "status": "contentious",
                "note": "It looks like we hardcoded the stems here to make sure they fit nicely with the sidebars. This is probably a discussion for elsewhere, but is that really the best solution? It would take some work, but perhaps we should refrain from encoding (single-bar) breve and longa glyphs, and instead draw their bars with primitives to match the stem.",
                "ref": {
                    "url": "https://lists.gnu.org/archive/html/lilypond-devel/2021-07/msg00029.html",
                    "threaded": true
                }
            },
            "noteheads.sM1": {
                "name": "noteheadDoubleWholeAlt",
                "altOf": "noteheadDoubleWhole"
            },
            "noteheads.s0": "noteheadWhole",
            "noteheads.s1": "noteheadHalf",
            "noteheads.s2": "noteheadBlack"
        }
    },
    {
        "name": "Special Notehead",
        "glyphs": {
            "noteheads.sM1double": "noteheadDoubleWhole",
            "noteheads.s0diamond": "noteheadDiamondWholeOld",
            "noteheads.s1diamond": "noteheadDiamondHalfOld",
            "noteheads.s2diamond": "noteheadDiamondBlackOld",
            "noteheads.s0triangle": [
                "noteheadTriangleWhole",
                {
                    "name": "noteheadTriangleDownWhole",
                    "status": "rejected",
                    "note": "This and the following matchups are highly debatable, so I opted to define a new notehead group instead."
                }
            ],
            "noteheads.s1triangle": [
                "noteheadTriangleHalf",
                {
                    "name": "noteheadTriangleDownHalf",
                    "status": "rejected"
                },
                {
                    "name": "noteheadTriangleLeftWhite",
                    "status": "rejected"
                }
            ],
            "noteheads.s2triangle": [
                "noteheadTriangleBlack",
                {
                    "name": "noteheadTriangleDownBlack",
                    "status": "rejected"
                },
                {
                    "name": "noteheadTriangleLeftBlack",
                    "status": "rejected"
                }
            ],
            "noteheads.s0slash": "noteheadSlashWhiteWhole",
            "noteheads.s1slash": "noteheadSlashWhiteHalf",
            "noteheads.s2slash": {
                "name": "noteheadSlashHorizontalEnds",
                "note": "For some reason Bravura includes a version with vertical line ends, which is why this glyph name specifies horizontal ends."
            },
            "noteheads.s0cross": "noteheadXWhole",
            "noteheads.s1cross": "noteheadXHalf",
            "noteheads.s2cross": "noteheadXBlack",
            "noteheads.s2xcircle": [
                {
                    "name": "noteheadHalfWithX",
                    "note": "A lot of options here. It seems that mapping them all should work just fine.",
                    "ref": "https://lists.gnu.org/archive/html/lilypond-devel/2021-07/msg00029.html"
                },
                "noteheadVoidWithX",
                "noteheadCircleXWhole",
                "noteheadCircleXHalf",
                "noteheadCircleX"
            ],
            "noteheads.s0harmonic": [
                {
                    "name": "noteheadDiamondWhole",
                    "note": "SMuFL-using programs will expect the -Diamond- set to be visually cohesive, so we should encode both -Whole and -Half as aliases for -.s0harmonic."
                },
                "noteheadDiamondHalf"
            ],
            "noteheads.s2harmonic": "noteheadDiamondBlack"
        }
    },
    {
        "name": "Shape-note Notehead",
        "glyphs": {
            "noteheads.s0do": {
                "name": "noteShapeTriangleUpWhite",
                "note": "SMuFL's coverage of shape notes is rather poor, missing many inverted glyphs, so be warned: I've had to add quite a few new base glyph names throughout this section."
            },
            "noteheads.s1do": {
                "name": "",
                "status": "contentious",
                "note": "I think the reason to distinguish -.s1xx from -.s0xx disappeared with commit 2d460deb (Define notehead attachment points separately); indeed, I've found every pair's generating code to be functionally identical and not worth encoding twice. (Further -s1xx's in the Aiken and Funk sets will be omitted for brevity; see the Walker section for a small exception.)",
                "ref": "https://lists.gnu.org/archive/html/lilypond-devel/2021-07/msg00034.html"
            },
            "noteheads.s2do": "noteShapeTriangleUpBlack",
            "noteheads.s0doThin": {
                "name": "noteShapeTriangleUpWhiteThin",
                "altOf": "noteShapeTriangleUpWhite"
            },
            "noteheads.s2doThin": {
                "name": "noteShapeTriangleUpBlackThin",
                "altOf": "noteShapeTriangleUpBlack"
            },

            "noteheads.s0re": "noteShapeMoonWhite",
            "noteheads.s2re": "noteShapeMoonBlack",
            "noteheads.s0reThin": {
                "name": "noteShapeMoonWhiteThin",
                "altOf": "noteShapeMoonWhite"
            },
            "noteheads.s2reThin": {
                "name": "noteShapeMoonBlackThin",
                "altOf": "noteShapeMoonBlack"
            },

            "noteheads.s0mi": {
                "name": "noteShapeDiamondWhiteReversed",
                "altOf": "noteShapeDiamondWhite"
            },
            "noteheads.s2mi": {
                "name": "noteShapeDiamondBlackReversed",
                "altOf": "noteShapeDiamondBlack"
            },
            "noteheads.s0miMirror": "noteShapeDiamondWhite",
            "noteheads.s2miMirror": "noteShapeDiamondBlack",
            "noteheads.s0miThin": {
                "name": "noteShapeDiamondWhiteThin",
                "altOf": "noteShapeDiamondWhite"
            },
            "noteheads.s2miThin": {
                "name": "noteShapeDiamondBlackThin",
                "altOf": "noteShapeDiamondBlack"
            },

            "noteheads.u0fa": "noteShapeTriangleLeftWhite",
            "noteheads.d0fa": "noteShapeTriangleRightWhite",
            "noteheads.u2fa": "noteShapeTriangleLeftBlack",
            "noteheads.d2fa": "noteShapeTriangleRightBlack",
            "noteheads.u0faThin": {
                "name": "noteShapeTriangleLeftWhiteThin",
                "altOf": "noteShapeTriangleLeftWhite"
            },
            "noteheads.d0faThin": {
                "name": "noteShapeTriangleRightWhiteThin",
                "altOf": "noteShapeTriangleRightWhite"
            },
            "noteheads.u2faThin": {
                "name": "noteShapeTriangleLeftBlackThin",
                "altOf": "noteShapeTriangleLeftBlack"
            },
            "noteheads.d2faThin": {
                "name": "noteShapeTriangleRightBlackThin",
                "altOf": "noteShapeTriangleRightBlack"
            },

            "noteheads.s0sol": "noteShapeRoundWhite",
            "noteheads.s2sol": "noteShapeRoundBlack",

            "noteheads.s0la": "noteShapeSquareWhite",
            "noteheads.s2la": "noteShapeSquareBlack",
            "noteheads.s0laThin": {
                "name": "noteShapeSquareWhiteThin",
                "altOf": "noteShapeSquareWhite"
            },
            "noteheads.s2laThin": {
                "name": "noteShapeSquareBlackThin",
                "altOf": "noteShapeSquareBlack"
            },

            "noteheads.s0ti": "noteShapeTriangleRoundWhite",
            "noteheads.s2ti": "noteShapeTriangleRoundBlack",
            "noteheads.s0tiThin": {
                "name": "noteShapeTriangleRoundWhiteThin",
                "altOf": "noteShapeTriangleRoundWhite"
            },
            "noteheads.s2tiThin": {
                "name": "noteShapeTriangleRoundBlackThin",
                "altOf": "noteShapeTriangleRoundBlack"
            },

            "noteheads.u0doFunk": [
                {
                    "name": "noteShapeMoonRightWhite",
                    "note": "SMuFL has only one set for all shape-note systems. For clarity, we should add suffixes to our non-Aiken sets and make them stylistic alternates of the unsuffixed glyphs. Our glyphs should also have unsuffixed aliases when not already defined in the Aiken set."
                },
                {
                    "name": "noteShapeMoonRightWhiteFunk",
                    "altOf": "noteShapeMoonRightWhite"
                }
            ],
            "noteheads.d0doFunk": [
                {
                    "name": "noteShapeMoonLeftWhite",
                    "note": ""
                },
                {
                    "name": "noteShapeMoonLeftWhiteFunk",
                    "altOf": "noteShapeMoonLeftWhite"
                }
            ],
            "noteheads.u2doFunk": [
                "noteShapeMoonRightBlack",
                {
                    "name": "noteShapeMoonRightBlackFunk",
                    "altOf": "noteShapeMoonRightBlack"
                }
            ],
            "noteheads.d2doFunk": [
                "noteShapeMoonLeftBlack",
                {
                    "name": "noteShapeMoonLeftBlackFunk",
                    "altOf": "noteShapeMoonLeftBlack"
                }
            ],

            "noteheads.u0reFunk": [
                "noteShapeArrowheadRightWhite",
                {
                    "name": "noteShapeArrowheadRightWhiteFunk",
                    "altOf": "noteShapeArrowheadRightWhite"
                }
            ],
            "noteheads.d0reFunk": [
                "noteShapeArrowheadLeftWhite",
                {
                    "name": "noteShapeArrowheadLeftWhiteFunk",
                    "altOf": "noteShapeArrowheadLeftWhite"
                }
            ],
            "noteheads.u2reFunk": [
                "noteShapeArrowheadRightBlack",
                {
                    "name": "noteShapeArrowheadRightBlackFunk",
                    "altOf": "noteShapeArrowheadRightBlack"
                }
            ],
            "noteheads.d2reFunk": [
                "noteShapeArrowheadLeftBlack",
                {
                    "name": "noteShapeArrowheadLeftBlackFunk",
                    "altOf": "noteShapeArrowheadLeftBlack"
                }
            ],

            "noteheads.u0miFunk": {
                "name": "noteShapeDiamondWhiteReversedFunk",
                "altOf": "noteShapeDiamondWhite"
            },
            "noteheads.d0miFunk": {
                "name": "noteShapeDiamondWhiteFunk",
                "altOf": "noteShapeDiamondWhite"
            },
            "noteheads.s2miFunk": {
                "name": "noteShapeDiamondBlackFunk",
                "altOf": "noteShapeDiamondBlack"
            },

            "noteheads.u0faFunk": {
                "name": "noteShapeTriangleLeftWhiteFunk",
                "altOf": "noteShapeTriangleLeftWhite"
            },
            "noteheads.d0faFunk": {
                "name": "noteShapeTriangleRightWhiteFunk",
                "altOf": "noteShapeTriangleRightWhite"
            },
            "noteheads.u2faFunk": {
                "name": "noteShapeTriangleLeftBlackFunk",
                "altOf": "noteShapeTriangleLeftBlack"
            },
            "noteheads.d2faFunk": {
                "name": "noteShapeTriangleRightBlackFunk",
                "altOf": "noteShapeTriangleRightBlack"
            },

            "noteheads.s0solFunk": [
                {
                    "name": "noteShapeRoundWhiteFunk",
                    "altOf": "noteShapeRoundWhite"
                },
                {
                    "name": "noteShapeRoundWhiteWalker",
                    "altOf": "noteShapeRoundWhite",
                    "note": "-sXsolFunk is used in both our Funk set and our Walker set. It should receive aliases for both so that other programs don't get confused."
                }
            ],
            "noteheads.s2solFunk": [
                {
                    "name": "noteShapeRoundBlackFunk",
                    "altOf": "noteShapeRoundBlack"
                },
                {
                    "name": "noteShapeRoundBlackWalker",
                    "altOf": "noteShapeRoundBlack"
                }
            ],
            
            "noteheads.s0laFunk": {
                "name": "noteShapeSquareWhiteFunk",
                "altOf": "noteShapeSquareWhite"
            },
            "noteheads.s2laFunk": {
                "name": "noteShapeSquareBlackFunk",
                "altOf": "noteShapeSquareBlack"
            },

            "noteheads.u0tiFunk": [
                "noteShapeTriangleRoundRightWhite",
                {
                    "name": "noteShapeTriangleRoundRightWhiteFunk",
                    "altOf": "noteShapeTriangleRoundRightWhite"
                }
            ],
            "noteheads.d0tiFunk": [
                "noteShapeTriangleRoundLeftWhite",
                {
                    "name": "noteShapeTriangleRoundLeftWhiteFunk",
                    "altOf": "noteShapeTriangleRoundLeftWhite"
                }
            ],
            "noteheads.u2tiFunk": [
                "noteShapeTriangleRoundRightBlack",
                {
                    "name": "noteShapeTriangleRoundRightBlackFunk",
                    "altOf": "noteShapeTriangleRoundRightBlack"
                }
            ],
            "noteheads.d2tiFunk": [
                "noteShapeTriangleRoundLeftBlack",
                {
                    "name": "noteShapeTriangleRoundLeftBlackFunk",
                    "altOf": "noteShapeTriangleRoundLeftBlack"
                }
            ],


            "noteheads.s0doWalker": {
                "name": "",
                "status": "contentious",
                "note": "Our Walker glyphs distinguish whole from half notes in only one respect: whole notes appear to face downwards all the time. It seems to me that that sort of difference would be better defined within the \\walkerHeads command rather than in the font, which would allow us to remove more redundant glyphs. Thoughts? (From now on, -.s0xxWalker glyphs will be omitted for brevity.)",
                "ref": "https://lists.gnu.org/archive/html/lilypond-devel/2021-07/msg00034.html"
            },
            "noteheads.u1doWalker": [
                "noteShapeKeystoneWhite",
                {
                    "name": "noteShapeKeystoneWhiteWalker",
                    "altOf": "noteShapeKeystoneWhite"
                }
            ],
            "noteheads.d1doWalker": [
                {
                    "name": "noteShapeKeystoneUprightWhite",
                    "status": "contentious",
                    "note": "SMuFL's description for -Keystone- states that it is an 'Inverted keystone'. Therefore, it seems natural to me to call this one -KeystoneUpright-."
                },
                {
                    "name": "noteShapeKeystoneUprightWhiteWalker",
                    "altOf": "noteShapeKeystoneUprightWhite",
                    "status": "contentious"
                }
            ],
            "noteheads.u2doWalker": [
                "noteShapeKeystoneBlack",
                {
                    "name": "noteShapeKeystoneBlackWalker",
                    "altOf": "noteShapeKeystoneBlack"
                }
            ],
            "noteheads.d2doWalker": [
                {
                    "name": "noteShapeKeystoneUprightBlack",
                    "status": "contentious"
                },
                {
                    "name": "noteShapeKeystoneUprightBlackWalker",
                    "altOf": "noteShapeKeystoneUprightBlack",
                    "status": "contentious"
                }
            ],

            "noteheads.u1reWalker": [
                "noteShapeQuarterMoonWhite",
                {
                    "name": "noteShapeQuarterMoonWhiteWalker",
                    "altOf": "noteShapeQuarterMoonWhite"
                }
            ],
            "noteheads.d1reWalker": [
                {
                    "name": "noteShapeQuarterMoonLeftWhite",
                    "status": "contentious",
                    "note": "This seems like the best naming option, even though SMuFL's -QuarterMoon- glyph names don't indicate -Right-."
                },
                {
                    "name": "noteShapeQuarterMoonLeftWhiteWalker",
                    "status": "contentious",
                    "altOf": "noteShapeQuarterMoonLeftWhite"
                }
            ],
            "noteheads.u2reWalker": [
                "noteShapeQuarterMoonBlack",
                {
                    "name": "noteShapeQuarterMoonBlackWalker",
                    "altOf": "noteShapeQuarterMoonBlack"
                }
            ],
            "noteheads.d2reWalker": [
                {
                    "name": "noteShapeQuarterMoonLeftBlack",
                    "status": "contentious"
                },
                {
                    "name": "noteShapeQuarterMoonLeftBlackWalker",
                    "status": "contentious",
                    "altOf": "noteShapeQuarterMoonLeftBlack"
                }
            ],

            "noteheads.s1miWalker": {
                "name": "noteShapeDiamondWhiteWalker",
                "altOf": "noteShapeDiamondWhite"
            },
            "noteheads.s2miWalker": {
                "name": "noteShapeDiamondBlackWalker",
                "altOf": "noteShapeDiamondBlack"
            },

            "noteheads.u1faWalker": {
                "name": "noteShapeTriangleLeftWhiteWalker",
                "altOf": "noteShapeTriangleLeftWhite"
            },
            "noteheads.d1faWalker": {
                "name": "noteShapeTriangleRightWhiteWalker",
                "altOf": "noteShapeTriangleRightWhite"
            },
            "noteheads.u2faWalker": {
                "name": "noteShapeTriangleLeftBlackWalker",
                "altOf": "noteShapeTriangleLeftBlack"
            },
            "noteheads.d2faWalker": {
                "name": "noteShapeTriangleRightBlackWalker",
                "altOf": "noteShapeTriangleRightBlack"
            },

            "noteheads.s1laWalker": {
                "name": "noteShapeSquareWhiteWalker",
                "altOf": "noteShapeSquareWhite"
            },
            "noteheads.s2laWalker": {
                "name": "noteShapeSquareBlackWalker",
                "altOf": "noteShapeSquareBlack"
            },

            "noteheads.u1tiWalker": [
                {
                    "name": "noteShapeIsoscelesTriangleRightWhite",
                    "status": "contentious"
                },
                {
                    "name": "noteShapeIsoscelesTriangleRightWhiteWalker",
                    "altOf": "noteShapeIsoscelesTriangleRightWhite",
                    "status": "contentious",
                    "note": "See above regarding -.d1reWalker."
                }
            ],
            "noteheads.d1tiWalker": [
                "noteShapeIsoscelesTriangleWhite",
                {
                    "name": "noteShapeIsoscelesTriangleWhiteWalker",
                    "altOf": "noteShapeIsoscelesTriangleWhite"
                }
            ],
            "noteheads.u2tiWalker": [
                {
                    "name": "noteShapeIsoscelesTriangleRightBlack",
                    "status": "contentious"
                },
                {
                    "name": "noteShapeIsoscelesTriangleRightBlackWalker",
                    "altOf": "noteShapeIsoscelesTriangleRightBlack",
                    "status": "contentious"
                }
            ],
            "noteheads.d2tiWalker": [
                "noteShapeIsoscelesTriangleBlack",
                {
                    "name": "noteShapeIsoscelesTriangleBlackWalker",
                    "altOf": "noteShapeIsoscelesTriangleBlack"
                }
            ]
        }
    },
    {
        "name": "Rest",
        "glyphs": {
            "rests.0": "restWhole",
            "rests.1": "restHalf",
            "rests.0o": "restWholeLegerLine",
            "rests.1o": "restHalfLegerLine",
            "rests.M3": "restMaxima",
            "rests.M2": "restLonga",
            "rests.M1": "restDoubleWhole",
            "rests.M1o": "restDoubleWholeLegerLine",
            "rests.2": "restQuarter",
            "rests.2classical": "restQuarterOld",
            "rests.2z": "restQuarterZ",
            "rests.3": "rest8th",
            "rests.4": "rest16th",
            "rests.5": "rest32nd",
            "rests.6": "rest64th",
            "rests.7": "rest128th",
            "rests.8": "rest256th",
            "rests.9": "rest512th",
            "rests.10": "rest1024th"
        }
    },
    {
        "name": "Flag",
        "glyphs": {
            "flags.u3": "flag8thUp",
            "flags.u4": "flag16thUp",
            "flags.u5": "flag32ndUp",
            "flags.u6": "flag64thUp",
            "flags.u7": "flag128thUp",
            "flags.u8": "flag256thUp",
            "flags.u9": "flag512thUp",
            "flags.u10": "flag1024thUp",
            "flags.d3": "flag8thDown",
            "flags.d4": "flag16thDown",
            "flags.d5": "flag32ndDown",
            "flags.d6": "flag64thDown",
            "flags.d7": "flag128thDown",
            "flags.d8": "flag256thDown",
            "flags.d9": "flag512thDown",
            "flags.d10": "flag1024thDown",
            "flags.ugrace": "graceNoteSlashStemUp",
            "flags.dgrace": "graceNoteSlashStemDown"
        }
    },
    {
        "name": "Dot",
        "glyphs": {
            "dots.dot": "augmentationDot"
        }
    },
    {
        "name": "Dynamic",
        "glyphs": {
            "space": "dynamicCombinedSeparatorSpace",
            "f": "dynamicForte",
            "m": "dynamicMezzo",
            "n": "dynamicNiente",
            "p": "dynamicPiano",
            "r": "dynamicRinforzando",
            "s": "dynamicSforzando",
            "z": "dynamicZ"
        }
    },
    {
        "name": "Script",
        "glyphs": {
            "scripts.ufermata": "fermataAbove",
            "scripts.dfermata": "fermataBelow",

            "scripts.uhenzeshortfermata": "fermataShortHenzeAbove",
            "scripts.dhenzeshortfermata": "fermataShortHenzeBelow",
            "scripts.uhenzelongfermata": "fermataLongHenzeAbove",
            "scripts.dhenzelongfermata": "fermataLongHenzeBelow",

            "scripts.ushortfermata": "fermataShortAbove",
            "scripts.dshortfermata": "fermataShortBelow",
            "scripts.uveryshortfermata": "fermataVeryShortAbove",
            "scripts.dveryshortfermata": "fermataVeryShortBelow",

            "scripts.ulongfermata": "fermataLongAbove",
            "scripts.dlongfermata": "fermataLongBelow",
            "scripts.uverylongfermata": "fermataVeryLongAbove",
            "scripts.dverylongfermata": "fermataVeryLongBelow",

            "scripts.thumb": "stringsThumbPosition",

            "scripts.sforzato": [
                "articAccentAbove",
                "articAccentBelow"
            ],
            "scripts.espr": [
                "articSoftAccentAbove",
                "articSoftAccentBelow"
            ],
            "scripts.staccato": [
                "articStaccatoAbove",
                "articStaccatoBelow"
            ],
            "scripts.ustaccatissimo": "articStaccatissimoAbove",
            "scripts.dstaccatissimo": "articStaccatissimoBelow",
            "scripts.tenuto": [
                "articTenutoAbove",
                "articTenutoBelow"
            ],
            "scripts.uportato": "articTenutoStaccatoBelow",
            "scripts.dportato": "articTenutoStaccatoAbove",
            "scripts.umarcato": "articMarcatoAbove",
            "scripts.dmarcato": "articMarcatoBelow",

            "scripts.open": "brassMuteOpen",
            "scripts.halfopen": "brassMuteHalfClosed",
            "scripts.halfopenvertical": {
                "name": "brassMuteHalfClosedVertical",
                "altOf": "brassMuteHalfClosed"
            },
            "scripts.stopped": "brassMuteClosed",

            "scripts.upbow": "stringsUpBow",
            "scripts.downbow": "stringsDownBow",

            "scripts.reverseturn": "ornamentTurnInverted",
            "scripts.turn": "ornamentTurn",
            "scripts.slashturn": "ornamentTurnSlash",
            "scripts.haydnturn": "ornamentHaydn",
            "scripts.trill": "ornamentTrill",

            "scripts.upedalheel": "keyboardPedalHeel1",
            "scripts.dpedalheel": "keyboardPedalHeel2",
            "scripts.upedaltoe": "keyboardPedalToe1",
            "scripts.dpedaltoe": "keyboardPedalToe2",

            "scripts.flageolet": "stringsHarmonic",

            "scripts.segno": "segno",
            "scripts.varsegno": "segnoSerpent1",
            "scripts.coda": "coda",
            "scripts.varcoda": "codaSquare",

            "scripts.rcomma": [
                "breathMarkComma",
                "chantVirgula"
            ],
            "scripts.lcomma": {
                "name": "breathMarkCommaInverted",
                "altOf": "breathMarkComma",
                "status": "contentious",
                "note": "Is this primarily a chant thing or a modern notation thing? Might inform our name choice."
            },
            "scripts.rvarcomma": [
                {
                    "name": "breathMarkCommaStraight",
                    "altOf": "breathMarkComma",
                    "status": "contentious",
                    "note": "If anyone at all uses this thing for actual breath marks and not just chant, I say we add this name."
                },
                "chantCaesura"
            ],
            "scripts.lvarcomma": {
                "name": "breathMarkCommaStraightInverted",
                "altOf": "breathMarkComma",
                "status": "contentious",
                "note": "Is this primarily a chant thing or a modern notation thing? Might inform our name choice."
            },

            "scripts.arpeggio": [
                {
                    "name": "wiggleArpeggiatoUp",
                    "status": "contentious",
                    "note": "It looks like these glyphs are rotated in SMuFL. I'm thinking we create new glyphs according to their specs, while preserving our own for backwards compatibility."
                },
                {
                    "name": "wiggleArpeggiatoDown",
                    "status": "contentious"
                }
            ],
            "scripts.trill_element": [
                {
                    "name": "ornamentZigZagLineNoRightEnd",
                    "status": "contentious",
                    "note": "LilyPond uses trill_element, not trillelement, for trills, right?"
                },
                {
                    "name": "ornamentZigZagLineWithRightEnd",
                    "status": "contentious",
                    "note": "SMuFL places this variant at the right end of a trill; since LilyPond just repeats the same trill_element throughout, it'll just be another alias of trill_element."
                }
            ],
            "scripts.arpeggio.arrow.M1": {
                "name": "wiggleArpeggiatoDownArrow",
                "status": "contentious"
            },
            "scripts.arpeggio.arrow.1": {
                "name": "wiggleArpeggiatoUpArrow",
                "status": "contentious"
            },
            "scripts.trillelement": {
                "name": "ornamentZigZagLineShortened",
                "status": "contentious",
                "note": "Does LilyPond use this glyph? What for?"
            },
            "scripts.prall": "ornamentShortTrill",
            "scripts.mordent": "ornamentMordent",
            "scripts.prallprall": "ornamentTremblement",
            "scripts.prallmordent": [
                {
                    "name": "ornamentPrecompTrillWithMordent"
                },
                {
                "name": "ornamentTrillMordent",
                "ligOf": [
                    "ornamentZigZagLineWithRightEnd",
                    "ornamentMiddleVerticalStroke",
                    "ornamentZigZagLineNoRightEnd"
                ],
                    "status": "rejected",
                "note": "This and the following ornaments can be described as ligatures of the SMuFL 'Combining strokes for trills and mordents' glyphs--something for the bucket list.",
                "ref": "https://w3c.github.io/smufl/latest/tables/combining-strokes-for-trills-and-mordents.html"
                }
            ],
            "scripts.upprall": [
                {
                    "name": "ornamentPrecompSlideTrillDAnglebert"
            },
                {
                "name": "ornamentUpTrill",
                    "status": "rejected",
                    "note": "Never mind. I missed that SMuFL already has all these guys!",
                    "ref": "https://w3c.github.io/smufl/latest/tables/precomposed-trills-and-mordents.html"
                }
            ],
            "scripts.upmordent": [
                {
                    "name": "ornamentPrecompSlideTrillBach"
            },
                {
                "name": "ornamentUpMordent",
                    "status": "rejected"
                }
            ],
            "scripts.prallup": [
                {
                    "name": "ornamentPrecompTrillSuffixDandrieu"
            },
                {
                "name": "ornamentTrillUp",
                    "status": "rejected"
                }
            ],
            "scripts.downprall": [
                {
                    "name": "ornamentPrecompMordentUpperPrefix"
            },
                {
                "name": "ornamentDownTrill",
                    "status": "rejected"
                }
            ],
            "scripts.downmordent": [
                {
                    "name": "ornamentPrecompInvertedMordentUpperPrefix"
            },
                {
                "name": "ornamentDownMordent",
                    "status": "rejected"
                }
            ],
            "scripts.pralldown": [
                {
                    "name": "ornamentPrecompTrillLowerSuffix",
                    "status": "contentious",
                    "note": "LilyPond's glyph has three trill element repetitions, while this SMuFL glyph, the closest analog I could find, only has 2. Would it be worth it to give our glyph a new SMuFL name instead of this one?"
            },
                {
                "name": "ornamentTrillDown",
                    "status": "rejected"
                }
            ],
            "scripts.lineprall": [
                {
                    "name": "ornamentPrecompAppoggTrill"
            },
                {
                "name": "ornamentLineTrill",
                    "status": "rejected"
                }
            ],

            "scripts.caesura.curved": "caesuraCurved",
            "scripts.caesura.straight": "caesura",
            "scripts.tickmark": "breathMarkTick",

            "scripts.snappizzicato": "pluckedSnapPizzicatoAbove",

            "scripts.ictus": [
                "chantIctusAbove",
                "chantIctusBelow"
            ],
            "scripts.uaccentus": "chantAccentusAbove",
            "scripts.daccentus": "chantAccentusBelow",
            "scripts.usemicirculus": "chantSemicirculusAbove",
            "scripts.dsemicirculus": "chantSemicirculusBelow",
            "scripts.circulus": [
                "chantCirculusAbove",
                "chantCirculusBelow"
            ],
            "scripts.augmentum": "chantAugmentum",
            "scripts.usignumcongruentiae": "mensuralSignumUp",
            "scripts.dsignumcongruentiae": {
                "name": "mensuralSignumDown",
                "note": "These symbols appear to be mirrored, but it doesn't seem like much of an issue to me."
            }
        }
    }
]